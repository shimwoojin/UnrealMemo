#pragma once
/*
	1. 블프 에디터의 컴포넌트 이름을 변수의 이름으로 띄울지 말지를 정할 수 있음 (사실 TMI)
	- 에디터 개인 설정 -> 일반 -> 외형 -> 네이티브 컴포넌트의 기저 이름 표시

	2. #define TestMacro(...) FString::FromInt(__VA_ARGS__)
	- 가변인자로 아무것도 넣지 않게 될 경우 FSTring::FromInt()가 되기 때문에 에러임
	
	3. 문자열은 ""끼리 붙여서 사용 가능
	- "a"" ""b" = "a b" 임
	혹은
	- "abc""def" = "abcdef" 임

	4. execDynArrayAdd()라는 함수를 과제하다가 보았는데 어떻게 생겼는지 궁금해서 타고 들어가보니 반환형이나 매개변수들을 동일시하고
	함수 이름에만 차별을 두어서 엔진에서 정의해 둔 함수였음

	- 실제 구현부가 어떻게 되었는지 궁금하였지만 UObject 관련 cpp가 굉장히 많기 때문에 그 안에 어딘가에 있는 걸로 마무리 함
	- 저런 매크로가 반복 작업을 줄이는 데에는 좋지만 사용하는 입장에서 F12로 찾아갈 수가 없으니 불편하기 함

	5. 머티리얼의 변수는 문자열로만 통제가 가능함
	- 머티리얼에 있는 변수 '이름들'을 가져올 수는 있으나 '이름들'을 어떻게 활용할 지는 사용자의 몫

	6. TArray를 크기를 먼저 잡고 인덱스로 접근하기 위한 방법은
	- TArray<int> MyArray; 일 때
	- MyArray.AddDefaulted(10);

	- 사실 동일한 동작을 Reset이나 Reserve도 했을 것 같으나 Reserve의 주석에 after allocation 이라는 설명 때문에 아니라는 게 왜인지는 모르겠음

	7. MulticastDelegate가 Broadcast를 함에 있어 바인드 되었던 인스턴스가 삭제되어도 크래쉬가 안 남
	- 하지만 객체가 삭제 되었어도 바인드 자체가 사라지는 것은 아님
	- 객체가 소멸되는 시점에 언바인드를 해주어야 함(소멸자 혹은 OnDestroy)

	- 가비지 컬렉터가 동작하는 것도 확인해 볼 수 있었음
	- 가비지 컬렉터를 강제 동작시키는 명령어도 있었던 걸로 기억하는데 뭐였더라

	8. 공식 문서에서 MulticastDelegate 사용에 있어 매개변수로 래퍼런스를 넘겨 초기화를 하고자 하는 사용법은 bad라고 함
*/