#pragma once
/*
	1. 캐릭터가 상태를 가지고 상태가 어떤 상태인지 알아올 수 있는 인터페이스 정의
	  - 캐릭터의 상태에 대해선 열거형 정의해줌
	  - 언리얼에서 열거형은 버그가 좀 있는데 어떤 버그냐면
	  - 지우거나 할 경우 이미 배치해 놓은 인트턴스들의 값이 바뀌는 경우가 종종 있음
	  - 결론적으로 열거형을 건들 때는 신중해야 하고 이미 만들어 놓은 열거형의 상태에 대해선 지우거나 위치를 바꾸지 않는 것이 좋음
	  
	 2. 열거형을 만들 때 비트마스크 옵션을 쓸지 말지 정할 수 있고 이 비트마스크를 어떻게 활용하냐하면
	  - 인티저 유형의 변수에서 비트마스크 옵션을 키게 되면 위에서 만든 열거형에 대해 비트마스크를 쓸 수 있고
	  - MakeBitMask, SetBitMask 등의 함수로 플래그 설정할 수 있음, 당연히 비트마스크답게 or로 여러 상태에 대해 on 가능

	  3. BP_Character가 위에서 만든 열거형에 대해 변수로서 가지고 있게 되고
	   - 인터페이스에 정의한 IsState, GetState 를 오버라이딩 해줌

	   4. WeaponA와 WeaponB를 드는 동작에 대해 차이는 단지 Weapons 배열에 들어갈 인덱스에 차이를 주는 것이고
	    - 공통적으로 무기를 드는 동작은 Idle 상태에서 Arming 상태로 넘어가는 것임, Idle 상태에서만 동작해야 한다는 것

		5. 이벤트에서 로컬변수를 쓰기 위해서 와일드카드를 Output으로 해서 매크로를 정의했었는데 이것과 MakeInt, MakeFloat등과 비교를 하면
		 - 매크로는 Static과 같은 느낌
		 - 매크로로 사용한 와일드카드 output에 대해 reference 노드를 하나 만들어서 reference의 값을 바꿔주면 됨( 노드 이름 : 래퍼런스 변수 설정 )
		 - 와일드카드이기 때문에 먼저 어떤 변수 유형으로 쓸지 선 이어주고 래퍼런스 설정에 이어줘야 값을 설정할 수 있게 됨

		 6. 캐릭터가 무기를 하나만 쓰는 게임이 아니라면 캐릭터가 어떤 상태일 때 어떤 몽타주를 실행할 지에 대한 정보를 무기쪽에 건내주는 게 유연함
		  - BP_Weapon에서 Character의 상태를 받아서 상태에 따른 몽타주를 돌려주는 함수를 하나 정의하게 되는데...
		  - 열거형에 대한 스위치로 처리하고 멤버 함수에 대해 오버라이딩해서 어떤 상태일 때 어떤 몽타주를 돌려주는 방법은 유지보수가 어렵기 때문에 별로라고 함

		  7. 인터페이스와 추상클래스의 차이는 인터페이스 밑에 추상클래스를 여러개 정의하게 되면 그 추상클래스끼리는 관계가 없게 됨(?)
		   - 다른 가지를 타고 가는 느낌

		   8. 애님 컴포짓이란 걸 써봤는데
		    - Composit : 합성물
			- 단어 뜻에 맞게 애니메이션 시퀀스에 대해 단지 합치는 기능 정도를 가진 에셋이라고 생각하면 될 듯

			9. 애니메이션 시퀀스, 애니메이션 컴포짓, 애니메이션 몽타주 등에 대해서 간략하게 차이점을 설명했는데
			 - 컴포짓 : 시퀀스를 합성한 에셋
			 - 몽타주 : 애니메이션계의 끝판왕
				- Section을 지정해서 몇 프레임부터 몇 프레임에 대한 반복재생도 가능하고 해 줄 수 있고
				- 컴포짓이 가지고 있는 기능인 시퀀스들을 합치는 것도 가능하고
				- 몽타주는 블렌드 옵션도 있어서 몽타주의 전과 후 애니메이션과 어느 정도를 섞을지에 대한 수치를 정하는 옵션도 있음
				- 기타 여러가지로 유용함
				- Section을 지정해야 하는 일이 생기면 무조건 몽타주라고 함

			10. 컴포짓과 몽타주에 대해 몽타주가 무조건 상위호환이라는 식으로 설명이 됐지만 내가 생각하기에 차이점은
			 - 몽타주는 단발성일 때 다뤄지고
			 - 컴포짓은 상태기계 등에서 시퀀스와 같이 사용이 가능한 것으로 보임

*/