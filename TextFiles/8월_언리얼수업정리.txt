====
0801
====
	1. 표시 - 개발자 - 본
	- 게임 플레이 중에 본 확인 가능

	2. IK를 다룸에 있어 Effector와 Joint Target을 알아야 하는데
	- Effector : IK를 적용할 본에게 실제 적용할 위치 혹은 회전
	- Joint Target : IK를 적용할 본의 부모가 어디 쯤으로 와야하는지를 정하는 값(이 값을 잘못 설정하면 무릎이 꺾이면 안 될 방향으로 꺾인다거나 할 수 있음)

	- Effector는 미리 계산된 가상 본을 BoneSpace로 넘겨주고
	JointTarget은 적용할 본의 부모의 BoneSpace 정도를 넘겨주면 된다

	- 이 때 우리는 IK가 foot에 적용되지만 무릎에 대해서도 가상 본을 만들었는데 세밀한 조종을 할 경우 무릎의 위치도 조종해야 하는 경우가 있기 때문에
	무릎(부모 본)에 대해서도 가상 본은 만들어 두어 적용하는 것이 확장성 면에서 나아 보임

	3. 우리가 구성한 IK를 만들고 나서의 관점에서 추상적으로 설명하면
	- IK를 적용해서 땅의 경사와 높이에 맞게 발의 위치를 조종하고
	- 이렇게 됐을 때 메쉬가 늘어난다는 설정을 안하게 되면 원하는 결과를 얻을 수 없고(늘어난다고 하는 것도 본 사이 간격에 넓어져서 원하는 결과는 아님)
	- IK 적용하기 위해 왼발, 오른발의 위치 중 낮은 발만큼 골반을 낮춰주고
	- 위치가 조정될 왼발, 오른발에 대해서도 낮아진 골반만큼 빼주어야 함

	- IK 적용 후 실제 캡슐보다 스켈레탈 메쉬 자체는 경사면에서 낮은 위치에 있을 수 있음

	- 내가 이해하기엔 높은 발만 위치가 조정된 것으로 이해가 됨 -> 골반은 낮아지고 낮아진 골반만큼 밑에 발은 다시 빼주니깐 +- 0 이여서 밑에 발은 위치 변화 없음

	4. 라인트레이스로 땅의 위치만큼 조정된 가상본 혹은 IK 본이 있고 적용할 발이 있다면 <레그IK> 노드로 간단하게 처리할 수도 있음
	- 마찬가지로 캡슐이 경사에 걸치면 뒷발이 IK 적용이 안 되어서 골반 높이를 낮추는 로직 자체는 유지해주어야 함

	5. 애니메이션 레이어 전용 인터페이스가 있음
	- Instance Class를 변경하여 다른 애님 블프의 애님 레이어를 실행시킬 수도 있음(디테일 탭 안 보면 어떻게 동작하고 있는지 해석이 안 될듯;)

====
0807
====
	1. LegIK에서 Pelvis의 위치를 조정하는데 있어서 이 노드의 위치가 중요함
	- Root 밑에 Pelvis, ik_root가 같이 있는 상황이라 Pelvis가 Transform이 바뀐다고 해서 ik가 영향을 받지 않음
	- IK의 기본 방법은 Pelvis는 낮은 발만큼 낮추고 낮은 발은 따로 조정이 없고 높은 발은 높아진 만큼 IK 조정이 들어가게 됨
	- 기존 방법은 낮은 발은 위치 조정이 없고 높은 발은 높은 만큼 높아지게 IK를 적용해두고 그만큼 골반 위치를 조정하게 된다면
	- 오늘 발견한 방법은 Pelvis를 미리 낮추고 그거랑 별개로 왼발, 오른발은 각각 지들의 Trace 결과를 적용해준다.

	- 위 2 방법은 결과적으로 완전히 같은 결과가 되는데 그 원인이 Pelvis와 ik 본이 부모 관계가 아니기 때문이였음

	2. 해결하지 못한 난제가 있는데
	- LegIK 노드 (혹은 2본 IK)에 Effector로 적용해 줄 본을 ik_foot_l 혹은 r을 주게 되면 이상해졌음(언리얼 기본 스켈레톤, 달리기 기준)
	- 상식적으로 생각해서 버텍스가 부여되지 않은 ik 본을 effector로 줘도 되는게 맞는데 안됐음
	- 기존처럼 가상본을 적용시켜주는 것은 됨
	- ik본을 위치를 바꾸고 ik본의 자식인 가상본을 ik 노드에 물려주면 작동함
	- ik본의 위치를 바꾸고 ik본 자체를 effector로서 동작시키는게 우리가 원하는 목표였으나 해결이 안 됐음

	- 참고로 내가 현재 쓰고 있는 프로젝트에선 ik위치를 바꾸고 ik본을 ik노드에 적용해서 원하는 결과를 얻었음
	- 애니메이션이나 본에 뭔가 차이가 있지 않나 싶긴 하나 이딴 건 그만 알아보자

	- 위 안되는 방법처럼 하게 되면 걷는 동작에서 무릎은 움직이나 발바닥이 땅에 붙어서 무릎만 통통 튕기게 되는데
	- 걷는 애니메이션이나 기본 동작이 이상해지는 거지 ik 자체가 계단에서 적용은 되었음

====
0808
====
	1. TPS 프로젝트 새로 만듬
	- Animation Starter Pack 에셋 추가
	- Millitary Weapon Dark 에셋 추가

	2. C++ -> 블프로 상속하여 클래스 만들었을 때
	- 클래스 명을 바꾸는 것은 블프에서의 래퍼런스가 깨지지 않는 것으로 알고 있었으나
	- 파일명을 바꾼 것이 원인이 되어 래퍼런스가 깨졌던 것으로 추정됨

	3. Character, Player, PlayerCotroller 만들어줌
	- 키 바인딩은 PlayerController에서 하기로 하였음
	- void APlayerController::SetupInputComponent() 함수에 키 바인딩 해주면 됨
	- w,a,s,d, 마우스 조작에 따른 바인딩을 해주었고 움직임, 화면 전환을 담당할 예정
	- 착각하기 좋은 포인트가 있는데 w,a,s,d 움직임은 조종하는 pawn에 대해 하는 것이고 마우스 조작에 따른 화면 전환은 Controller 자체의 회전인 것임

	4. 키 바인딩을 하기 위해 프로젝트 세팅에서 해줄 수도 있지만 C++에서도 가능함
	- 간단하게 소개하면 (APlayerController::SetupInputComponent를 오버라이드하여 처리)

	FInputAxisKeyMapping MoveForward("MoveForward", EKeys::W, 1.f);
	FInputAxisKeyMapping MoveBackward("MoveForward", EKeys::S, -1.f);
	UPlayerInput::AddEngineDefinedAxisMapping(MoveForward);
	UPlayerInput::AddEngineDefinedAxisMapping(MoveBackward);

	InputComponent->BindAxis("MoveForward", this, &ThisClass::MoveForward);

	- BindAxis에서 "MoveForward"가 프로젝트 세팅 혹은 위의 코드에서 추가해둔 입력 매핑에 대한 문자열이고
	&ThisClass::MoveForward는 우리가 바인드할 함수 그 자체임, 위 코드에선 저 함수가 있는지는 알 수 없음(있다고 가정)
	
	- 굳이 Cpp에서 입력 매핑해야하면 좋은 이유는 잘 모르겠으나 알아둬서 나쁠 거 없음

	- 참고로 GetWorld()->GetFirPlayerController()->PlayerInput->AddAxisMaping(MoveForward); 로
	UPlayerInput::AddEngineDefinedAxisMapping(MoveForward); 이 코드를 대체할 수 있다고 함(이건 테스트 안 해봄)

====
0809
====
	1. 주석 대신 #pragma region
	- 클래스 내 멤버함수들도 성격에 따라 주석을 달아서 그룹을 짓는다거나 할 수도 있고
	특히 인터페이스를 상속받은 함수 모음들에 대해 주석으로 정리하기 보다 고급 방법으로 pragma region 사용가능함

	#pragma region MySpace
	void DoSomething();
	void DoSomething2();
	#pragma endregion

	2. 가상함수의 시작을 알리는 virtual
	- 오버라이드를 알리는 override
	- override가 이 밑으로는 이루어지지 않을 것임을 알리는 final
	- final과 같은 동작을 하는 final override

	3. Cpp 상에서 입력 매핑하는 것이 가능한데

	#include "GameFramework/PlayerInput.h" 해주고
	
	- MoveFB에 대해서 입력 매핑을 작성하면

	PlayerInput->AddAxisMapping(FInputAxisKeyMapping("MoveFB", EKeys::W, 1.f));
	PlayerInput->AddAxisMapping(FInputAxisKeyMapping("MoveFB", EKeys::S, -1.f));

	- 여기에 바인드까지 작성하면

	InputComponent->BindAxis("MoveFB", this, &ThisClass::MoveFB);

	- InputComponent는 AActor에서 부터 상속받은 접근 가능한 멤버 변수(UInputComponent)이고
	PlayerInput은 APlayerController로 부터 상속받은 접근 가능한 멤버 변수(UPlayerInput)임