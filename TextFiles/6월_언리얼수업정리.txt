======
0619
======
	1. 블프 -> C++ 프로젝트 전환은 블프 프로젝트에서 그냥 C++ 클래스 만들면 됨

	2. .Net Frame Work 4.6.1 이상 설치해야 함
	- C++로 열기 위해선 필요한가 봄

	3. VS2023 버전은 지원 안 되는 것 같음

	4. C++ 프로젝트 경로엔 한글 안 들어가게 유의

	5. Unreal C++ 프로젝트는 실제 경로와 프로젝트 상 보이는 경로가 일치하지 않음
	- 폴더와 필터의 차이임
	- 엔진 소스들은 설치 경로 상 이곳 저곳 퍼져있기 때문에 편의를 위해 이렇게 제공하는 듯
	- 헤더와 cpp파일들은 좌측 하단에 파란 표시가 나는데 <weak ptr> 정도로 생각하면 될 듯 -> 변경사항은 다 반영이 되지만 삭제 시 프로젝트에서의 삭제일 뿐 실제 경로에서 삭제하는 것이 아님

	6. C++ 프로젝트는 Content, Config, Source, UProject가 필수 요소
	- .vs : vs의 인텔리전스에 대한 데이터베이스나 vs의 세팅 정보를 저장하는데 시간이 지나면 용량이 굉장히 커질 수 있으나 편의를 위해 프로젝트 진행 중엔 냅두는 것이 좋을 듯
	- Binaries : 사용자의 C++을 빌드한 목적 파일, .dll은 이곳에 있음(C++ 빌드 결과물)
	- Intermediate : 언리얼 헤더 툴에 의해 생성 된 generate.h 파일이 여기 있음, 프로젝트 기본 생성시에도 1GB정도 차지하는데 어떤 것이 있는지는 더 알아봐야 함
	솔루션 관련 파일들도 Intermediate에 생성 됨(.sln과 별도로 관리)
	- Saved : 차차 알아보도록
	- Source : 헤더, Cpp -> 우리의 메인 폴더

	- sln : vs의 프로젝트를 지워도 재생성가능 -> 폴더 경로의 .uproject에 우클릭 후 generate ... 누르면 새로 솔루션 만들어 줌

	7. 위에서 필터에서 지워봤자 실제 경로에서 지우는 것이 아닌 프로젝트에서 제외하는 거라 했는데 반대로 추가하려면
	- 위치 시킬 경로에 파일을 위치하고 필터에 드래그 해오면 됨
	- 혹은 프로젝트에 추가하는 단축키 활용

	8. 엔진에서 제공하는 헤더 혹은 cpp의 실제 경로가 궁금하면 그 파일에 대해 우클릭 후 경로로 이동 가능함

	9. <프로젝트명.h>가 어떤 용도인지는 알아봐야 함

	10. <프로젝트명.build.cs>는 모듈을 string으로서 추가하는 C# 코드
	- 기본 제공 모듈은 Core, CoreUObject, Engine, InputCore인데 Engine에서 대부분의 Conponents들을 포함시켜주는 것 같음(엔진 API 참고함) 
	- 블프에선 그냥 쓰던 AI 기능을 쓰고 싶으면 "AIModule"을 이 폴더에 문자열로 추가해줘야 함

	- Slate UI는 주석이 쳐져있는데 UI 프로그래밍하는 기능임 (html 같은 ?)

	11. 언리얼 C++마법사로 새로운 클래스(이번엔 액터였음)를 만들게 되면 VS상에선 외부에서 변경했다고 문구가 뜸
	- 변경사항을 반영해줘야 함

	12. 새 클래스의 맨 위 주석은 <프로젝트 세팅 - 법률 - 저작권 고지>에서 문구를 바꿀 수 있음

	13. 접두어를 간단히 알아보면
	- U : UObject
	- A : AActor
	- T : Template
	- F : C++

	14. C++에서 지원하지 않거나 엔진에 필요한 기능은 대부분 매크로로서 지원함
	- UCLASS(), GENERATED_BODY(), 프로젝트명_API 등

	15. 프로젝트명_API를 알아보면 -> #define 프로젝트명_API DLLEXPORT, #define DLLEXPORT __declspec(dllexport)
	- 필수는 아니나 우리가 작성한 Class가 외부에서 사용이 가능하다는 것을 의미함
	우리가 작성한 C++ 코드들도 엔진에겐 그저 수많은 모듈 중 하나일 뿐이고 다른 모듈에서 C++ 모듈의 내부 클래스에 접근하고자 한다면 <프로젝트명_API> 키워드가 붙어있어야 함

	- 비슷한 문법으로 #define WINAPI __stdcall, #define CALLBACK WINAPI등이 있는데
	갑작스레 함수 호출 규약에 대해 알아보면 (16에서 계속)

	16. cdecl, stdcall, thiscall 등이 있음
	- cdecl : Caller가 StackFrame 정리 -> 가변인자 가능
	- stdcall : Callee가 StackFrame 정리 -> 가변인자 불가능
	- thiscall : stdcall + this 전달(여기서 this란 클래스로 만들어질 인스턴스의 주소를 저장하는 this 포인터를 (미리) 제공하는 것)

	- cdecl, stdcall 공통점 : 오 -> 왼 으로 인자 읽어옴

	17. 결국 <프로젝트명_API>는 .dll인 것이고(동적 라이브러리) .lib(정적 라이브러리)와 비교하면
	- .lib : 속도가 빠르고 모든 기능을 제공하나 용량이 크다는 것이 단점이고 이 단점을 보완하기 위해 보통 동적 라이브러리를 사용함
	- 언리얼은 기능 별 수많은 .dll을 제공받아서(이렇게 제공받은 dll들을 <모듈>이라고 하는 것 같음)

	18. 카톡을 예로 들면 
	- .exe 파일을 눌러 프로그램을 실행하고자 할 때
	- 지정해둔 경로에 제공받아야 할 .dll중에 하나라도 없다면(경우에 따라 다름) 실행이 불가능함

	19. 클래스의 이름을 바꾸고자 한다면
	- 클래스 이름, 생성자, generated.h 파일(접두어x), .cpp에서 추가한 헤더의 이름, cpp에 구현 된 함수들의 네임 스페이스, 실제 파일 이름
	들을 모두 바꿔주어야 함
	- 바꾸고 빌드까지 해야 에디터에 반영 됨 -> ctrl shift b
	- 에디터에서 이전 내용이 표시되는 경우가 있는데(버그) 프로젝트 껐다 켜주면 됨

	20. 클래스를 삭제하고자 한다면
	- 안전하게 하고자 한다면 일단 sln과 에디터를 닫고

	- 경로 상 Source에서 h와 cpp를 찾아서 지워주고
	- .sln에서 존재하지 않지만 null을 물고 있는 h와 cpp도 지워주고
	- 빌드를 조지고 나면 에디터에서 없어지게 됨

======
0620
======
	1. StackFrame : 함수가 호출될 때 불린 함수만의 스택 영역을 구분하기 위하여 생성된 공간
	- <지역 변수>, <매개 변수>, <복귀 주소>를 저장
	- 함수가 끝나면 그 함수를 불러준 Caller(이전 함수)의 주소로 복귀함 -> 이 때 함수 호출 규약에 의해 Caller가 StackFrame을 정리할 지 Callee가 정리할 지 정하게 됨(stdcall, cdecl)
	- VS에서 기본값으로 설정해 둔 함수 하나 당 지역 변수의 공간은 1MB이다 -> 1MB는 1000000Byte이고 이 수치는 Int(4Byte) 250000(25만)개를 선언할 수 있는 수치임
	- int a[250001]; 은 불가능하단 뜻이고 이 이상의 공간을 할당하고자 한다면 동적할당을 하거나 VS의 기본값을 바꿔주어야 함

	2. 언리얼에서 문자열을 사용하기에 앞서
	- MBCS(Multi - Byte Character Set) : char (1Byte) -> 우리가 흔히 아는 아스키코드 생각하면 됨
	- UNICODE : wchar_t (2Byte) -> 온 지구의 모든 말을 담기 위해 문자 당 2Byte면 충분한가 봄(전에 알기로 문자 당 4Byte까지도 늘어날 수 있는 걸 봤었는데..)

	- 프로젝트의 성격에 따라 문자를 char 혹은 wchar_t로 받는 경우가 다른데

	- 이를 일반화 하기 위해 TEXT("나 문자열임 ㅋ")를 MBCS로 쓸지 UNICODE로 쓸 지 정할 수 있게 해놨다고 보면 됨

	- 간단하게는 어딘가에 프로젝트 세팅에서 바꿀 수 있겠지만 근본적인 코드로서 알아보자면

	#if defined _UNICODE
	#define TEXT(Text) L##Text
	#else
	#define TEXT(Text) Text
	#endif

	라고 보면 됨

	- L은 이 문자열이 유니코드임을 나타내고 ##은 문자열간에 구분을 위한 문법이라고 보면 됨

	3. 언리얼 C++의 디버깅 방법은 중단점을 걸고(F9) (혹은 코드의 좌측에 클릭) F5로 디버깅을 하게 되면 에디터가 새로 켜지게 됨
	- 이때 디버깅 하고자 하는 상황을 만들고(액터를 레벨에 배치한다거나) <플레이>를 하게 되면 중단점에 걸리게 됨

	- 위 방법이 번거롭다면

	- VS상에선 디버그가 진행 중(F5가 눌린 상태)이고 그 상태로 코드를 편집하고 나서 '저장' 후 에디터 상에서 '컴파일' 버튼을 누르고 에디터의 레벨을 '플레이' 해주면 됨
	- 근데 사실 이것도 번거로워 보이니깐 그냥 사양 좋게 맞춰서 필요할 때 마다 중단점 걸고 F5 누르고 '플레이' 할 것 같음

	4. 핫 리로드를 믿지 말고 에디터의 '컴파일' 버튼을 믿자 -> VS상 빌드보다 강력한 듯

	5. UE_LOG(LogTemp, Log, "문자열", 가변 인자)
	- 로그를 찍기 위해 3개의 인자 + 가변 인자를 넘기면 되는데
	- LogTemp : 로그의 제목, 로그의 맨 좌측 이름임
	- Log : Verbosity라고 하는데 Log의 정도? 얼마나 심각한가 정도를 찍어주는 거라고 보면 됨 -> Log 키워드는 이 표시를 안 하는 키워드인 듯
	- "문자열" : printf의 사용법과 같다고 보면 됨 -> 언리얼 식으로 쓰려면 TEXT("")를 사용하여 안전한 코딩하자

	6. 리플랙션 : 런타임에 클래스가 자기 자신을 조사할 수 있는 기능(어떤 변수가 있고 어떤 함수가 있고)
	- 현재 파악한 바로는 리플랙션이란 결국 UPROPERTY, UCLASS, UFUNCTION, UPARAM 등 언리얼이 제공하는 매크로들임
	- 리플랙션이 강력하긴 하지만 C++ 내부에서 사용하는 변수 혹은 함수에는 위 키워드들을 사용하지 않아도 됨
	- 리플랙션이란 결국 <에디터 혹은 엔진>에게 정보를 주는 것

	7. 변수에 UPROPERTY() 키워드를 붙여 리플랙션을 활용한다면
	- 일단 UPROPERTY가 없이 C++문법을 따라 작성한 변수는 에디터의 블루 프린트에 노출도 되지 않고 getter, setter 등 블프 상에선 아무것도 할 수 없음
	- UPROPERTY(EditDefaultsOnly) int i; 로 선언함으로서 블프의 클래스에서 이 변수의 기본 값을 편집할 수 있게 됨 -> Instance에서는 불가능
	- 다른 키워드들은 설명없이 나열만 하겠음
	- EditDefaultsOnly, EditInstanceOnly, EditAnywhere, VisibleAnywhere, VisibleDefaultsOnly, VisibleInstanceOnly, BlueprintReadOnly, BlueprintReadWrite 는 꽤나 자주 쓸 내용
	- BlueprintGetter = GetterFunctionName, BlueprintSetter = SetterFunctionName 이거는 한 번 써봄직 함

	- 위 키워드 중에 EditAnywhere -> VisibleAnywhere로 바꾸는 등의 작업을 하면 Instance별로 편집 된 값에 대해선 바뀌지 않는 의도치 않은 상황이 있을 수 있음

	- Edit과 Visible 시리즈는 공존할 수 없음

	- 문서 참조 : https://docs.unrealengine.com/4.26/ko/ProgrammingAndScripting/GameplayArchitecture/Properties/Specifiers/

	- Category = CategoryName 으로 체계적인 설계도 습관화하도록

	8. 함수에 붙는 지정자는 UFUNCTION()임
	- UFUNCTION(BlueprintCallable)을 함으로서 블루프린트에서 호출 가능
	- BlueprintGetter, BlueprintCallable, BlueprintImplementableEvent, BlueprintNativeEvent, BlueprintPure, BlueprintSetter 등

	- 문서 참조 : https://docs.unrealengine.com/4.26/ko/ProgrammingAndScripting/GameplayArchitecture/Functions/Specifiers/

	- UFUNCTION(BlueprintCallable, meta = DisplayName = "Blueprint Node Name")으로 블프 함수 이름을 대체할 수도 있는 듯
	- SpawnActorFromClass가 블프 버전에서 이런 이름인 건 위 방법으로 쓰인거 같음 -> C++ 버전은 SpawnActor<ClassName>()
	
	9. 프로젝트이름.h 는 <미리 컴파일 된 헤더> 정도의 용도임
	- 자주 추가할 헤더들이나 프로젝트 진행을 도울 매크로를 정의하여 사용

	- 기본으로 #include "CoreMinimal.h"가 <프로젝트이름.h>에 추가 되어 있는데
	언리얼 마법사로 Uobject 밑으로 생성하게 되면 헤더마다 맨 윗 줄에 CoreMinimal.h를 추가해주게 되는데 이걸 <프로젝트이름.h>으로 대체하여 사용하는 경우가 종종 있는 듯

	- CoreMinimal.h 에 대해선 4.x 버전 이후 IWYU(Include What You Use)로 엔진의 규모가 커지면서 컴파일 시간을 단축시켜주고자 정말 필요한 필수 헤더들만 포함한
	CoreMinimal.h만 포함하고 필요한 것들은 직접 cpp에 추가하여 사용하는 방법을 채택함

	- 4.x 버전 이전에선 Engine.h 혹은 EngineMinimal.h 등을 추가하여 거의 모든 헤더들을 추가하여 사용했다고 함

======
0621
======

	1. UFUNCTION 지정자 중 BlueprintNativeEvent를 사용할 때 <함수이름_Implementation> 이라는 이름의 함수를 새로 정의해주어야 하는데
	- BlueprintNativeEvent 키워드가 붙게 된 함수는 <문서이름.gen.cpp>에 기본 구현을 갖게 됨 -> 이 파일의 경로는
	C:\UnrealProjects\<프로젝트이름>\Intermediate\Build\Win64\UE4Editor\Inc\<프로젝트이름> 임
	- generated 파일은 언리얼 헤더 툴이 우리 파일을 분석해서 자동으로 만들어주는 파일로 알고 있음 -> 작성한 헤더들의 맨 밑에 generated.h를 추가하는 이유이기도 함
	- 그 구현의 내용은 C++ 버전으로 호출할 땐 <함수이름_Implementation>을 호출하고
	블루프린트에 오버라이딩 된 구현이 있다면 그 내용을 호출한다는 뜻

	- 하여 우리는 BlueprintNativeEvent를 사용하여 C++에 기본 구현을 갖고 블루프린트로 오버라이드하여 사용하고자 하는 경우가 있다면
	
	기본 함수는 구현을 비워두고 ( gen.cpp에서 이미 <함수이름_Implementation>을 부르기로 약속돼 있음 )
	<함수이름_Implementation>을 정의부와 구현부를 마련해두어야 함

	이 때 <함수이름_Implementation>에는 어떠한 지정자도 사실 의미가 없는 것이(어떤 것은 있을수도) 블프에서 오버라이드 안 할 시 이 함수를
	부르게 되는데 블프 관점에서 노출된 함수는 <함수이름> 이기 때문 -> <함수이름>이 내부적으로 <함수이름_Implementation>을 부르는 것

	하여 리플랙션 기능을 이용하고 싶다면 블프에 노출될 함수인 <함수이름>을 통하는 것이 의도와 맞을 듯

	추가로 virtual은 C++의 그것과 같음

	2. BlueprintNativeEvent 키워드를 적은 후 함수 본체의 구현부를 만들고 빌드를 해봤을 때 아래와 같은 오류 목록이 나옴
	- C2084 : '함수이름' 함수에 이미 본문이 있습니다. / 파일 : MyActor.gen.cpp

	- 위에서도 적어놨지만 BlueprintNativeEvent 키워드가 붙는 순간 엔진에서 그 함수의 기본 구현은 gen.cpp에도 적히게 됨
	- 그걸 한 번 더 정의하려고 했을 경우 위와 같은 오류가 나는 것

	- 그렇기 때문에 BlueprintNativeEvent 키워드가 붙은 함수는 구현부만 작성하고 추가로 _Implementation 키워드를 붙인 함수를 따로 작성하는 것

	- BlueprintImplementableEvent는 구현부만 작성하고 노터치

	3. 2번과 마찬가진데 본체의 구현부는 빼고 빌드를 하게 되었을 때도 오류가 나는데
	- LNK2001 : 확인할 수 없는 외부기호

	- 위 상황이 의미하는 바는 <함수이름_Implementation>이 작성되어 있지 않기 때문

	- gen.cpp에 자동으로 작성해 준 우리의 <함수이름>에는 C++ 기본구현만 되어있으면 <함수이름_Implementation>을 부르도록 되어있는데 이 정보를 찾을 수 없기 때문에 링크에러가 나는 것

	4. 오류 목록에서 확인하기 힘든 경우
	- <출력>을 살펴보면 됨

	- BlueprintNativeEvent가 붙은 함수에는 Virtual 키워드를 못 붙임
	- _Implementation이 붙은 함수는 Virtual 키워드가 가능함
	- 하지만 C++에서 상속관계를 가질 것이 아니고 상속을 하더라도 그 자식이 다른 구현을 가질 것이 아니라면 '굳이'가 되겠음(지양하는 편이 낫다라는 것은 virtual을 적음으로서 생기는 부하가 있다고 알고 있음)

	5. 클래스를 리플랙션 시키기 위한 키워드(혹은 지정자)인 UCLASS()를 알아보자
	- UCLASS를 알아보기에 앞서 언리얼의 모든 클래스는 월드에 배치됨과 상관없이 인스턴스를 하나씩은 무조건 가짐
	- 이 말인 즉슨 C++의 추상 클래스가 불가능하다는 뜻
	- C++ 문법 상 추상 클래스가 성립하기 위해선 1) 멤버 함수 중 순수 가상 함수가 하나 이상 있을 것 2) class name 뒤에 abstract 키워드를 통해 가능(둘 중 하나만 하면 됨)
	- 그렇기 때문에 언리얼에선 이 문법이 불가능함 + 순수 가상 함수도 가질 수 없음( = 0; 혹은 abstract; )

	- 위의 얘기를 정리하면 언리얼 클래스는 C++식 문법으론 1) 추상 클래스가 불가능 2) 순수 가상 함수가 불가능 이라는 것

	- 언리얼식 문법으로 추상 클래스를 하기 위해선
	- UCLASS(Abstract)

	- 언리얼식 문법으로 순수 가상 함수를 하기 위해선
	- 함수의 이름 뒤에 PURE_VIRTUAL(함수이름, ...)
	- virtual int PureVirtual() PURE_VIRTUAL(AMyActor::PureVirtual, return 0;)

	#define PURE_VIRTUAL(func, __VA_ARGS__) 는 결국 매크로인 것이고
	이것이 순수 가상 함수로서 동작할 수 있는 원리는
	순수 가상 함수 : 자식 클래스에선 부모의 순수 가상 함수를 무조건 재정의(오버라이드)하지 않으면 안됨 -> 정의하지 않을 경우 에러가 뜨거나 빌드가 불가능
	결국 오버라이딩을 해야 하는 것에 목적을 두어 기본 구현이 불리게 되면 static_assert가 불리게 됨(기본 구현을 부르면 안 된다는 뜻, 오버라이드를 강제함)
	그리고 이 때 첫 번째 인자로 넘겨주는 func은 # 연산자를 통해 문자열로 변환되어 static_assert의 경고 문구의 일부분이 됨(이것이 순수 가상 함수이고 어떤 함수이름인지 나타내기 위한 경고 문구)

	- 수업 중에 return 0;가 필요 없는 것 아니냐 했는데 int가 반환형이라면 return 값이 있긴 있어야 하겠음 -> static_assert에 대해 무시하고 진행하게 되면 정상진행 될 수도 있기 때문
	- LowLevelFatalError는 프로그램을 중단한다고 함 -> 무시하고 정상 진행은 안 되는 듯

	- 가변인자의 공간은 return이기 보다는 추가적인 내용(메시지를 더 쓴다거나)을 적기 위한 공간 정도

	6. 기본적으로 UPROPERTY 혹은 UFUNCTION은 public 혹은 protected에 적게 되는 경우가 많은데
	- 프로젝트 구조 상 private에 정의해야 하나 블루프린트에서 call할 필요가 있는 경우 사용할 수 있는 meta 지정자가 있음 -> meta = (AllowPrivateAccess)

	- 다른 프로퍼티들과 함께 쓰게 되면
	UPROPERTY(EditAnywhere, BlueprintReadOnly, meta = (AllowPrivateAccess)

	- 사실 C++에서 기본 구현을 갖고 블루프린트는 C++를 상속받으면 되는데 그렇기에 드는 생각이 위의 private을 허용하는 메타지정자를 사용하기 보단 protected로 접근 지정자를 제한하여
	블프에선 접근을 허용하는 것은 어떤가 싶기도 함

	7. 추가로 UFUNCTION, UPROPERTY에서 getter랑 setter를 지정하는 키워드 BlueprintGetter, BlueprintSetter, BlueprintGetter = "BlueprintGetterName", BlueprintSetter = "BlueprintSetterName"을 사용해봤는데
	- 과제로 했던 EditByIntRef에서 위 키워드를 추가한 변수가 값이 바뀌지 않았었음
	- 언젠간 알아보는 걸로

	8. class UStaticMeshComponent* Mesh;
	- 포인터 변수(64비트 환경에선 8바이트)에 대해선 전방선언을 통해 헤더의 추가 없이 변수를 선언 가능함
	- class 키워드가 없다면 UStaticMeshComponent를 구현할 수 있는 클래스를 가진 헤더를 추가해야 할 것

	- 이 방법이 IWYU(Include What You Use)의 원칙임
	- 헤더는 전방선언을 하고 cpp에서 실제 구현 혹은 사용할 헤더를 추가해서 사용하는 것

=====
0622
=====
	1. UPARAM(ref)를 사용하여 블프와 C++에서 input 인자에 대해서 수정이 가능하게끔 설계 할 수 있음 -> 납득이 안 가는 부분은 UPARAM(ref)가 없을 때 C++에선 인자를 받아야 사용가능한 함수이지만
	블프에서는 인자로 받는 input이 아닌 output으로서 출력이 되는 다른 함수로 사용되게 됨
	- 이 부분에 대해서 엔진에선 어떻게 활용하는지를 좀 더 알아볼 필요가 있겠음
	
	2. 래퍼런스에 대해서 좀 더 알아보면 일단 래퍼런스를 쓰는 이유 2가지 -> 1) 반환하기 위해(값의 수정) 2) 인자 전달의 경량화
	- 위 2가지 경우에 대해서 구분하는 방법은 프로그래머의 의도로 작성된 const 지정자임
	- 경량화를 위한 래퍼런스는 const 지정자를 붙이게 됨

	3. const의 사용은 크게 3가지로 나뉨 -> 1) 원본의 수정을 막는 const (const int* a; 혹은 int const * a;) 2) 주소의 수정을 막는 const (int * const a) 3) 멤버변수의 수정을 막는 함수 뒤에 붙는 const
	- 위는 포인터와 같이 쓴 const에 대해서 나열했고
	- 래퍼런스에 대한 const는 위 2번의 특징을 기본으로 갖고 있는 const임(래퍼런스는 선언과 동시에 어떤 주소를 물고 있어야 하고 이 값은 수정 불가능함 -> 이 사실이 사실은 *const였던 거임)

	4. void TestFunction(const int& testInt)에 대해서 블프의 함수가 되게 된다면
	- 위 함수는 수정 반환이 아닌 경량화의 목적이므로 블프에서 핀이 input으로 받아지게 됨
	
	5. Actor는 RootComponent가 없다면 Transform이 없음
	- SetRootcomponent(루트가 될 컴포넌트); 혹은 RootComponent = 루트가 될 컴포넌트; 를 해주면 됨

	6. 루트를 정하고 루트 밑에 다른 컴포넌트를 붙이는 식으로 액터가 구성되는데 붙이는 작업이 이루어지지 않는다면 안 붙은 컴포넌트는 자유 분방한 트랜스폼을 갖게 됨
	- 불일 컴포너트->SetUpAttachment(루트컴포넌트의이름); 혹은 불일 컴포넌트->SetUpAttachment(GetRootComponent()); 혹은 루트에 붙이기 않겠다면 불일 컴포너트->SetUpAttachment(붙고 싶은 컴포넌트의 이름);

	7. CreateDefaultSubobject를 통해 생긴 컴포넌트의 이름은 겹치면 안 됨

	8. 리플랙션이 없게 되면 블프 에디터에서 디테일 탭이 안 보이게 됨
	- 이러한 현상을 가지는 컴포넌트가 있는데 Character 밑에 달린 Arrow Component가 이러함
	- Arrow는 정면을 바라보는 것을 강요하기 위함인듯
	- Arrow도 리플랙션을 켜게 되면 사실 많은 정보를 가지고 있음

	9. 컴포넌트 변수에 대해 UPROPERTY 지정자는 VisibleAnywhere가 관습적으로 많이 붙게 됨
	- VisibleAnywhere라고 해서 블프에서 디테일 탭의 편집이 불가능한 것이 아님
	- EditAnywhere인 경우 물고 있는 포인터 주소가 바뀔 수 있는 것이라 알고 있었는데 VisibleAnywhere도 가능한 것으로 보임

=====
0623
=====
	1. 심볼을 보고 부모의 접근 지정자를 알 수 있음
	- public : 우측 하단에 암것도 x, proteced : * , private : 자물쇠로 잠겨 있음
	
	2. Setter, Getter는 있으면 이걸로 쓰자
	- SetRootComponent만 해도 부모의 proteced 변수 RootComponent에 값을 주는 것 뿐이지만 SetRootComponent() 함수를 통하면 추가적인 작업을 거쳐줌

	3. CreateDefaultSubobject, SetupAttachment등의 함수는 생성자에서만 쓸 수 있는 Construction 함수임
	- CretaeDefaultSubobject에 대응하는 NonConsturction 함수는 NewObject 임
	- Actor는 GetWorld()->SpawnActor()

	4. Root = CreateDefaultSubobject<USceneComponent("Root"); 라 했을 때
	- 템플릿 함수의 반환 값을 Root인 포인터에 반환 받는 것임
	- 위의 경우 USceneComponent를 명시하였지만 템플릿 함수 중에 인자로 USceneComponent를 받는다고 가정하면 템플릿 인자 없이도 타입 추론이 가능함
	- 위의 경우는 인자로 받는 USceneComponent 인자가 없기 때문에 우리는 템플릿 인자를 직접 지정해줘야 함

	5. 고급 코딩을 하기 위해 매크로를 잘 써보면
	- #define CreateDefaultSubObjectAuto(Component)\
	Component = CreateDefaultSubobject<>("#Component")

	- 일단 위까지는 나도 쓸 수 있음 -> 하지만 템플릿 인자를 채워줘야 하는데 변수의 이름으로부터 무슨 타입인지를 알아내야 함

	- decltype(*Component)까지 하게 되면 Component& 까지 받을 수 있음 -> 포인터 변수에 대해 역참조한 값을 decltype에 넣으면 왜 래퍼런스가 나오는지는 잘 모르겠음

	- &를 떼줘야 하는 상황임
	
	- <type_traits> 헤더 추가해주고

	- #define CreateDefaultSubObjectAuto(Component)\
	Component = CreateDefaultSubobject<std::remove_reference<decltype(*Component)>::type>("#Component")

	- #define CreateDefaultSubObjectAuto(Component)\
	Component = CreateDefaultSubobject<std::remove_reference_t<decltype(*Component)>>("#Component")
	
	- 저 구조체의 헤더를 까보면 멤버변수 중에 type이라는 변수는 래퍼런스가 떼진 본래 타입을 갖는 변수임

	6. 익명구조체도 decltype을 통해 재사용할 수 있음
	- struct
	{
	int i1;
	int i2;
	} ii;

	decltype(ii) ii2;

	7. #define PI 3.14 는 컴파일 이전에 수행(전처리)되고 컴파일 코드에는 3.14가 적혀있어서 추적이 불가능함
	- const 변수를 활용

	8. 생성자 기본 생성 시 tick을 켜주는 코드도 자동으로 적히는데 이 코드를 지워주게 되면 Actor의 tick은 작동하지 않음
	- Actor에 붙은 Component와는 별개

	9. 엔진의 입장에서 tick에 대해 크게 2가지로 구분하면 1) 게임 tick 2) 엔진 tick
	- 엔진 tick 중 collision에 대해서 간단하게 이해하면 collision 관련해서 누구랑 누구랑은 block일거고 누구랑은 overlap일거고 정해놓은거에 대해 매 프레임 실제로 actor끼리 충돌했나 확인해보고
	충돌했으면 각 actor들에게 '너 충돌했음', '너 겹쳤음'을 callback으로 보내주는 느낌

	10. 에셋을 바인딩해주는 4가지 방법
	- 1) 블프에서 직접 2) 소프트 래퍼런스 3) ConstructorHelpers::FObjectFinder<형식> 변수명(경로) 4) 블프에서 적용한(혹은 적용할) 에셋을 C++에서 ConsturctionScript에서 적용
	- 위 4가지보다 사실 FM은 생성자에서 AssetManager를 활용하는 것(하지만 굉장히 고급이니깐 엄청 나중에 해보도록)

	11. 소프트 래퍼런스란 ?
	- 경로를 물고 있는 것
	- 이 변수를 활용하려면 로드해서 그 결과물에 대해 활용 가능함
	- 동기 혹은 비동기를 고를 수 있는데(동기는 우리의 게임 시간과 같은 타임라인, 비동기는 다른 타임라인(다른 스레드일 듯))
	- 비동기를 사용함에 있어 결국 Completed 핀을 활용해야 하는데 Completed 이전에 변수를 활용하려면 None임

	- C++ 변수로 표현하게 되면 TSoftObjectPtr<>(소프트 오프젝트 래퍼런스), TSoftClassPtr<>(소프트 클래스 래퍼런스)

	12. 언리얼에선 멤버 변수를 덮어쓰는 지역변수가 불가능함(혹은 인자도 같은 이름 허용이 안됨)
	- this가 굳이가 되버리는

	13. C++과 블프를 같이 활용함에 있어서 C++의 생성자는 블프에 설정해둔 값을 읽어올 수 없음
	- 최소 ConstructionScript 혹은 Beginplay는 되어야 함

	14. void OnConstruction(FTransform const& Transform) override;
	- ConstructionScript의 C++ 버전 이름

	15. Ctrl + . -> 정의 만들기는 남발하지 말자 ㅋㅋ
	- 인텔리전스가 다 읽고 나서 해야 바로 만들어짐

	16. Super는 습관화 -> 부모의 함수를 물려받았다면
	- 빈 부모의 함수라도 오버헤드보다 우리 게임이 잘 돌아가는 걸 생각한다면,,

	17. 빌드 중에 오류가 날 것 같다면 빌드 취소 -> ctrl + break / 빌드 : ctrl + shift + b

	18. 위의 ConstructorHelpers::FObjectFinder<>의 NonConsturction 버전은(NonConstruction이라 함은 생성자가 아닌 이라 볼 수 있음)
	- UStaticMesh* MyMesh = LoadObject<UStaticMesh>(this, TEXT("StaticMesh'/Game/Cube.Cube'"));
	- UObject* MyMesh2 = StaticLoadObject(UstaticMesh::StaticClass(), this, TEXT("StaticMesh'/Game/Cube.Cube'"));

====
0626
====
	1. 언리얼 마법사를 통하지 않고 에디터와 소통할 수 있는 헤더와 CPP를 만들 수 있음
	- Source 폴더 하위에 헤더와 CPP를 추가하고 CoreMinimal.h, 상속받은 부모의 헤더, generated.h(UCLASS 키워드가 붙는 클래스라면)를 추가해주면 됨
	- 언리얼 마법사를 통하게 되면 헤더와 CPP도 만들지만 빌드도 하기 때문에 시간이 걸리는 측면이 있음
	- 빈 Actor를 미리 만들어두고 경로만 잘 잡아서 만든 헤더와 CPP에 복붙해넣는 방식도 괜찮다고 함

	2. 언리얼 마법사가 우리의 클래스를 만들어주는 비밀을 조금 알아보면
	- C:\Program Files\Epic Games\UE_4.26\Engine\Content\Editor\Templates 이 경로에서 <.template> 확장자를 가진 파일들을 메모장으로 열게 되면
	우리가 클래스를 만들면 제공할 틀이 잡혀 있음
	- %와 %사이에 적어둔 환경 변수를 통해 우리가 정할 클래스 이름 혹은 ClassName.generated.h의 접두어를 빼는 등에 대해서도 대응하여 만들어지는 것

	3. int32는 언리얼의 4byte 정수형을 의미함
	- 멀티 플랫폼에 대응하기 위한 흔한 기법임
	- 플랫폼이 다르면 같은 자료형 이름이여도 byte수가 다를 수 있음(상대적인 크기만 지정한다고 함)
	- byte수가 다르게 되면 문제점이 있는데 1) Overflow, 2) 구조체 등을 다룰 때 주소로 접근하는 코딩은 불가능해짐
	
	- window를 예를 들면 우리가 추가하고 있는 헤더 중 어딘가에

	#if defined _WIN64
	typedef unsigned int uint32;

	이런 느낌으로 적히게 됨

	4. UE_LOG(LogCategoryName, Verbosity, 하고 싶은 말, ...) 에서 LogCategoryName을 우리가 직접 정의할 수 있음(2가지 방법)
	- 1번 방법 : cpp파일에 DEFINE_LOG_CATEGORY_STATIC(GPC, Log, All)
	- 2번 방법 : cpp파일엔 DEFINE_LOG_CATEGORY(GPC), 헤더 파일엔 DECLARE_LOG_CATEGORY_EXTERN(GPC, Log, All)

	1번은 해당 cpp파일에서만 쓸 수 있고
	2번은 헤더를 추가한 곳이라면 어디든 사용 가능함

	- 위의 함수 이름에 적힌 STATIC은 다른 파일에서 사용이 불가능함을 알리는 전역에서의 static의 의미를 담고 있음

	5. static과 extern을 좀 더 알아보면
	- 같은 프로젝트 내 다른 cpp파일이지만 같은 변수명을 사용하게 되면 빌드 오류가 나게 됨(각각의 cpp파일은 각각의 obj 파일을 만들지만 obj 파일이 모여 만든 exe파일(혹은 lib 혹은 dll)을 구동함에 있어 문제가 생김)
	- 이 때 등장할 수 있는 키워드가 extern임 -> 다른 cpp에서 전역 변수를 사용하고 싶으면 extern 키워드를 붙여 사용해주면 됨
	- 근데 이 extern을 막아주는 키워드가 static임 -> static이 붙은 전역 변수를 extern이 불가능함

	- 함수에는 extern이 기본으로 포함(생략)되어 있음

	6. 전역변수에 대해 이름이 겹칠 경우 <::변수이름> 으로 구분지을 수 있음
	- 전역의 namespace는 비어 있게 사용

=====
0627
=====
	1. FString은 TCHAR형으로 형변환(정확히는 형변환은 아님)해서 사용하기 위해 2가지 방법이 있음(TEXT()의 경우 TCHAR를 요구함)
	- 1) Data.GetCharArray().GetData() 2) *Data
	- 2번 방법은 *에 대해 연산자 오버로딩이 된 것

	2. FVector, FRotator 등엔 ToString()이라는 알아서 FString으로 반환해주는 함수가 있음

	3. UObject는 각각 FName을 가지고 FName은 ToString으로 변환해서 사용 가능

	4. Rotator는 받는 인자가 pitch, yaw, roll 순
	- 주석을 달 때 매개변수마다 주석을 다르게 달아줄 수 있는데
	- @param <매개변수 이름> <주석 내용>

	5. 블프의 PrintString처럼 화면에 띄우기 위한 함수는(log가 아닌)
	- GEngine->AddOnScreenDebugMessage(); 매개변수는 아래서 설명
	- key, 띄울 시간, 색, 메시지 등은 필수로 넘겨주야 하고 디폴트 매개변수로 잡혀있는 값이 있음
	- key는 각 메시지에 대해 Channel임 -> 띄워질 위치가 정해진다는 뜻
	- key의 기본값 -1은 Channel 없이 다른 Channel이 적혀있건 관계없이 쭉 밀어 냄
	- 디폴트 인자 중에 bNewerOnTop이 있는데 쌓이는 순서에 대해 toggle하는 것
	- 크기에 대해서도 디폴트 인자임

	6. FPS장르를 다룰 때 상대는 내 전신이 보이고 플레이어는 본인의 손과 무기 정도만 보이면 되는데
	- 이 때 플레이어에게 SkeletalMesh를 두개 주고 1) 상대에게 보이는 용도 2) 플레이어에게 보여질 용도로 나눈 뒤
	- <디폴트 - 렌더링> 에서 OwnerNoSee, OnlyOwnerSee 등의 값을 조정하여 사용하는 기법도 있다고 함

	7. 5번 얘기를 이어하자면 화면에 띄울 메시지를 제외하고 key, 띄울 시간, 색에 대해선 디폴트 매개변수를 주고자 하는데
	- 여러 함수에 같은 값을 주어 초기화를 하는 내용이기 때문에 1) static const 변수 2) 매크로 를 활용하여 이 내용의 유지보수성을 올릴 수 있는데
	
	- 상수성에 대해 define을 하는 방법이 구식 방법이라 첫 시도엔 static const를 사용함

	- 클래스 내의 static을 사용함에 있어 클래스 내에 변수를 static 키워드를 적어 붙여주고(초기화는 하지 않음)
	cpp에 가서 static 키워드는 빼고 변수 이름 앞에 네임스페이스를 붙여 초기화를 해주면 됨(int같은 정수형이나 char형에 대해선 cpp가 아닌 클래스 내부에서도 초기화가 가능하다곤 함)

	- 위 방법의 안 좋은 점은 함수에 마우스를 갖다 대어 기본값이 뭘로 설정되었나 확인하고자 할 때 한 눈에 확인이 어렵다는 점이 있음

	- 위 방법에 대해선 매크로가 더 유리해보임(매크로는 함수에 마우스 갖다 대면 어떤 값인지 치환되서 볼 수 있음)

	8. 대문자 변환 : ctrl shift u, 소문자 변환 : ctrl u
	- 대문자 변환은 잘 안 쓰던 기능인데 매크로를 자주 코딩하게 되면 유용할 듯

	9. 헤더의 끝에서 #undef 을 통해 그 매크로의 해제를 할 수 있으나 보통은 지양하는 게 좋음

	10. FString::FromInt()로 int를 FString으로 바꿀 수 있었다면
	- FString::SanitizeFloat()은 float을 FString으로 바꿀 수 있음(Sanitize는 '살균하다'의 의미 -> 쓸데없는 0을 떼줌, 굉장히 청결한 float인 듯 ㅋㅋ)

	11. Logger::Print()를 정의함에 있어 GEngine->AddOnScreenDebugMessage()를 호출하며 오버로딩하는 형식으로 정의하였는데
	- 이런 경우 GEngine->AddOnScreentDebugMessage()에 대해 한 단계 래핑하여 함수로서 관리해주는 것이 좋음(Internal 함수)

	12. UKismetSystemLiberary::PrintString()은 우리가 알던 블프의 printstring임(#include "Kismet/KismetSystemLibrary.h"
	- 우리가 Logger를 새로 정의한 이유는 log와 screen에 따로 쓸 함수를 분리함도 있으며
	- 화면에 띄울 경우 key를 주어 가시성을 높여줌에 있음

=====
0628
=====
	1. LineTrace에서 디버그 모드를 켜면 선이 보이고 선에 닿으면 점이 찍히는 헤더를 사용해 봄
	- #include "DrawDebugHelpers.h"
	- DrawDebugSolidbox, DrawDebugPoint, DrawDebugSphere, DrawDebugCircle, DrawDebugLine, DrawDebugCapsule, DrawDebugDirectionalArrow
	- FBox라는 구조체는 양 끝 모서리의 위치를 넘겨주면 생성 가능
	- DrawDebugPoint는 ScreenSpace로 찍히게 됨
	- DrawDebugCircle은 얼마나 잘게 쪼개지는지에 따라 더 정확한 원이 됨(인자로 넘김)
	- DrawDebugCapsule은 FQuat을 받게 되는데 FRotator를 주로 사용하는 입장에서 FQuat로의 변환은 1) FRotator().Quaternion() 2) FQuat(FRotator())
	- FQuat::Identity -> 쿼터니언의 기본 값 정도 되는 듯, 벡터로 따지면 제로 벡터

	2. Cpp 델리게이트를 다루기 이전에 블프에서 사용하던 이벤트 디스패처(멀티캐스트 델리게이트)를 좀 알아보면
	- 호출, 바인드, 언바인드, 모두 언바인드, 이벤트, 할당 정도가 있는데
	- 할당은 이벤트 디스패처가 받을 인자 목록에 맞춰 커스텀 이벤트를 만들어 줌
	
	- 델리게이트의 강력함을 간단하게 설명하면 우리는 그저 선언된 델리게이트를 원하는 곳에서 호출하기만 하면 됨
	호출에 앞서 누구의 이벤트(혹은 함수)를 바인드 해줄지는 유연함(동적 바인딩)

	3. 이벤트 디스패처에 바인딩을 하는 과정에서 내 이벤트 디스패처 변수는 private으로 보호하고 input값으로 이벤트를 받고 싶을 경우가 있을 수 있는데
	- 정식 지원을 하는 방법은 아니라 우회를 해야 함
	
	- 이벤트를 input으로 받는 노드(예를 들면 이벤트 바인딩 노드)에서 핀을 뽑아 함수의 input으로 주고 함수의 input을 통해 함수의 output으로까지 전달 가능
	꽤나 우회해서 함수의 input 혹은 output으로 이벤트를 받거나 보낼 수 있음

	- 함수 -> 이벤트로 전환은 <이벤트 생성> 노드를 이용

=====
0629
=====
	1. 과제 요약
	- 함수 포인터 선언 방법 : 반환값 (*변수이름)(매개변수타입,...);
	- 함수 포인터의 자료형화 : 1) typedef 반환값 (*자료형으로 쓸 이름)(매개변수타입,...); 2) using 자료형으로쓸이름 = 반환값 (*) (매개변수타입,...);
	- #include <functional> : std::function<반환값(매개변수,...)> 변수 이름;

	- 함수는 함수 이름 그 자체가 주소 -> 함수 포인터에 대입 시 &를 붙여도 안 붙여도 가능(멤버 함수는 & 강요됨)

	- 멤버 함수를 담는 함수 포인터 : void (ADrawer::*begin_play)() = &ADrawer::BeginPlay;
	위 포인터의 call : (this->*begin_play)();

	2. std::function<void(ADrawer&)> fvd = &Adrawer::BeginPlay;
	- 멤버 함수를 담는 함수 포인터의 std::function 버전
	- call : fvd(*this);

	3. std::function<void()> fvv = [](){};
	- 람다 가능
	- void(*fvv)() = [](){}; 얘도 가능

	4. c 버전 함수 포인터와 std::function 버전 간 대입도 가능
	- void (*funcptr)() = fvv.target<void(void)>();

	5. std::function엔 functor도 담김

	struct A
	{
		void operator()(){}
	}
	
	A b;

	- functor 호출 : b();
	- functor를 함수 포인터에 담는 것 : void (*funcptr)() = b;
	- call : funcptr();

	- void (*funcptr)() = A(); 도 가능 -> 임시 객체를 넘겨줘도 가능

	6. functor와 함수 포인터를 엮어 유용하게 사용하는 법
	- 호출 시점에 구조체의 변수 값에 따라 functor를 엮어 놓은 함수 포인터의 결과를 다르게 하고 싶을 때

	struct Sum
	{
		int i;
		int j;

		int operator()()
		{
			return i + j;
		}
	};

	Sum sum;
	sum.i = 5;
	sum.j = 7;
	std::function<int()> fiv = sum;
	fiv();

	- fiv가 불리는 시점에 i, j 값에 따라 결과가 달라질 수 있음

	7. 위와 정반대의 성격으로 i,j를 함수가 binding 되는 순간의 값으로 묶어 버리는 방법이 있음(lambda)

	int i = 5;
	int j = 7;
	std::function<int()> fvv = [i, j]()
	{
		return i + j;
	}

	- 위 fvv 함수가 다른 곳에 가서 불리고 i,j가 값이 바뀌었더라도 return의 결과는 12일 거임

	8. 구조체와 functor, 함수포인터 등을 사용해서 누구의 함수를 부를지를 지정해 둘 수 있음

	struct ADrawerBeginPlay
	{
		ADrawer* This;
		std::function<void(ADrawer&)> BeginPlay;

		void operator()()
		{
			BeginPlay(*This);
		}
	};

	9. 8번의 방법을 std::bind로 쉽게 처리 가능
	- std::function<void()> fvv = std::bind(&ADrawer::BeginPlay, this);

	10. std::function<void()> fvv = std::bind(&ADrawer::Tick, this, 4.25f);
	- std::bind가 위에서 한 일은 ADrawer::Tick(ADrawer* this, float DeltaSeconds)에 대해 this랑 4.25f라는 값으로 미리 값을 넘겨주고 매개변수가 없는 함수처럼 취급시켜줌
	
	- std::function<void(float)> fvv = std::bind(&ADrawer::Tick, this, std::placeholders::_1);
	- std::function<void(ADrawer&)> fvv = std::bind(&ADrawer::Tick, std::placeholders::_1, 4.25f);

	- std::placeholders::_1로 미리 안 채울 값에 대해선 땜빵으로 쓰는 게 가능(땜빵할게 많아지면 _2, _3,...)

=====
0630
=====
	1. NamedBox 클래스를 만듬
	- UBoxComponent, UTextRenderComponent를 가짐
	- Text에 대해 정렬을 어떻게 할지 정해놓은 열거자를 구분짓는 네임스페이스가 EHorizTextAligment::EHTA_Center, EVerticalTextAligment::EVRTA_TextCenter로
	오타인가 싶음(SetHorizontalAlignment, SetVerticalAlignment)

	2. ThisClass로 본인 클래스의 소속을 나타낼 수 있음
	- ex. ThisClass::StaticClass(); 혹은 StaticClass();

	3. Overlap에 바인딩을 하기 위해 Actor가 정의해놓은 델리게이트에 AddDynamic을 해주어야 하는데
	- AddDynamic은 __Internal_AddDynamic을 포장한 매크로 함수여서 인텔리전스 검색이 안됨
	- OnActorBeginOverlap.AddDynamic(this,&ThisClass::OnActorOverlapStarted);
	- 우리가 정의한 바인딩할 함수의 타입은 반환값은 void이며 매개변수는 AActor*를 2개 받는 타입을 맞춰주어야 함
	
	4. AddDynamic이 아닌 Add를 사용하여 바인딩을 하고자 한다면 FScriptDelegate 타입을 인자로 넘겨주어야 하는데

	FScriptDelegate SD;
	SD.BindUFunction(this, "OnActorOverlapStarted");
	OnActorBeginOverlap.Add(SD);

	- 위 처리를 통해 AddDynamic과 같은 처리를 하지만
	- Name으로 받는 방식이나 코드가 길어지는 단점이 있음

	5. 내부적으로 AddDynamic도 &ThisClass::OnActorOverlapStarted로 받아서 내부적으론 함수 이름을 문자열 형태로 보관하긴 함
	- 멤버함수의 경우 "::"의 문자열을 찾아 그 뒷부분만 함수이름으로서 저장하게 됨

	6. AddDynamic으로 묶어줄 함수는 UFUNCTION()이어야 함

	7. 추상클래스를 만드는 방법은 UCLASS(Abstract)이고 순수가상함수는 PURE_VIRTUAL(함수이름) 인데
	- UObject밑으로 상속받은 객체들은 월드에 배치되지 않아도 인스턴스가 하나 이상 만들어지기 때문에 CPP의 기본문법이 사용불가능함
	- 하지만 CPP의 abstract로 순수가상함수를 만드는 것이 아예 불가능하지만은 않음

	8. NamedBox(사용자 정의 클래스)를 상속받은 DelegateTrigger 클래스를 언리얼 마법사로 만들게 되면
	- Actor를 만들었을 때와 달리 추가해 준 내용이 빈약한데
	- 특정 경로의 UObjectClass.h.Template의 내용을 편집해주면 됨(경로는 이전 내용에 있음)

	9. VS 인텔리전스가 제공하는 부모의 순수가상 모두 구현은 언리얼 프로젝트에선 사용 불가능

	10. 부모의 UFUNCTION을 붙인 내용은 자식에서 UFUNCTION의 오버라이드가 불가능함
	
	11. MSB 어쩌구 오류는 대체로 언리얼식 문법이 틀린 것임
	- 혹은 명령이 종료되었습니다 일 경우
	- 이럴 땐 출력 확인

	12. 부모의 접근 지정자가 언리얼 마법사가 만들어 줄 경우 public인데 그 의미는
	- 부모의 public, protected, private까지 접근이 가능하다는 뜻임(헷갈리는데 내용 재 확인 필요)

	- 언리얼은 public이 강요됨(protected, private 상속이 불가능함)

	13. C++는 C의 기본을 받아들이고 그 위에 덧쌓은 문법임
	- Cast가 괄호로 하는 Cast와 Static_Cast 등의 추가적인 문법을 생각하면 됨

	- .cpp와 .c는 빌드 방식이 다름
	
	extern "C"
	{
		void Text() {
			_asm{}
		}
	}

	- 호환을 위해선 위와 같은 문법이 가능함, 어셈블리어의 경우도 위와 같은 문법으로

	14. 델리게이트의 선언 방법은
	- TDelegate<void()> Trigger;
	- 함수포인터의 typedef을 델리게이트 버전으로 쓰게 되면
	- DECLARE_DELEGATE(FTriggerType)