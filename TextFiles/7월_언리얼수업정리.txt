====
0703
====
	1. AddDynamic을 통한 델리게이트 바인드는 "::"이 필수임
	- 누구의 함수인지를 명확히 해야 함

	2. C에서 안되는 문법 한 번 보고 가자

	int const i = 5;
	int arr[i] = {0,1,2,3,4};

	- C++은 허용하는 문법이나 C는 안됨
	- 이유는 C++에선 const가 conextpr로 읽혀 컴파일 타임 이전에 i에 대해 상수로 인식시켜 줄 수 있으나
	C는 컴파일 타임이 되어서야 i가 const로서 값이 변하지 않는 불변변수가 되기 때문에 컴파일 타임 이전의 오류를 막을 수 없음

	3. 바인딩이 되어있다는 가정하에 델리게이트를 동작시키는 코드 2가지를 보면
	- 1) if(Trigger.IsBound()) Trigger.Execute();
	- 2) Trigger.ExecuteIfBound();

	4. NamedBox를 상속한 DelegateTrigger가 본인의 이름을 띄우지 못하는 문제가 있는데
	- NamedBox에서 Text->SetText(StaticClass()->GetDisplayNameText()); 이 코드가 문제임
	- 해결 : Text->SetText(GetClass()->GetDisplayNameText());

	- 다른 해결 버전들 : 
		Text->SetText(UKismetSystemLibrary::GetDisplayName(this)));
		Text->SetText(GetName());

	5. 4번의 내용을 사용함에 있어 알아야 하는 내용이 있음
	- 생성자의 this는 본인을 호출하는 것임 -> 자식에서 생성자를 부름에 있어 A -> B -> C 로 상속을 시켰다 했을 때 생성자가 불리는 순서는 A -> B -> C 임
	A의 생성자가 사용됨에 있어 C는 아직 초기화가 안 되어 있기 때문에 접근이 불가능함

	- 그렇다면 4번에서 GetClass()를 했을 떄 자식의 클래스를 얻어 올 수 있었던 이유는
	UObjectBase에서 멤버변수로 최종 상속받은 클래스를 UClass* 타입으로 들고 있는 엔진의 설계방식 덕분임 -> GetClass()는 UClass* 타입의 멤버변수를 return하는 함수

	- 추가로 UObjectBase가 Actor보다 상위 클래스이고 GetClass()가 오버라이드 되지 않은 함수였기 때문에 UObjectBase가 정의한 내용이 그대로 불려질 수 있었음

	- 생성자에서 어떤 함수를 불렀을 때 자식에서 오버라이드 된 함수라면 오버라이드 된 내용이 아니라 생성자를 만들고 있는 그 클래스의 버전 함수가 불릴 것임

	6. TEnumAsByte를 사용함에 있어 전방선언이 가능함(TEnumAsByte는 언리얼의 템플릿 버전 Enum임)
	- TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType; 멤버변수에 대해
	namespace EDrawDebugTrace { enum Type; }

	7. float 자료형에 대해 10의 몇승 이런 표현
	- float MyFloat = 1e5f;
	-> 10의 5승이라는 뜻 ->100000

	- float MyFloat2 = 3e5f;
	-> 3 * 10의 5승이라는 뜻 -> 300000

====
0704
====
	1. TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
	
	UENUM(BlueprintType)
	namespace EDrawDebugTrace
	{
		enum Type
		{
			None,
			ForOneFrame,
			ForDuration,
			Persistent
		};
	}

	- UENUM에 BlueprintType을 해야 블프에서 사용 가능
	- C의 문법 enum을 네임스페이스로 구분지어 enum class와 비슷하게 사용

	2. enum이나 enum class나 따로 타입을 정하지 않으면 int 형인데(4byte)
	- enum class TestType : uint8 같은 문법으로 타입의 크기를 정해줄 수 있음
	- 추가로 enum에 정의한 열거자들이 순서대로 0,1,2,... 이런 literal 값들을 가지게 되는데
	이 literal조차 명시한 타입의 크기만큼 잡히게 됨

	3. 접미어 u는 unsigned int, ul은 unsigned long, ull은 unsigned long long

	4. unsigned long operator ""_deg(int i)
	{
		return i;
	}

	- 접미어의 오버라이딩을 하여 1_deg;는 int형이 아닌 unsigned long임
	- _(언더바)는 표준과 겹치는 이름이 될 수도 있으니 권고사항 -> 언리얼 프로젝트는 빌드 오류를 냄

	5. UENUM(BlueprintType)은 : uint8이 강제 됨
	- enum은 BlueprintType이 붙게 되면 enum의 선언에서 : uint8이 강제되는 것은 아니지만 사용함에 있어 TEnumAsByte<>를 거쳐 사용하고
	- enum class는 BlueprintType이 붙게 되면 선언에 : uint8이 강제됨 -> 빌드 오류가 나버림

	- UENUM(BlueprintType)을 사용하게 되면 namespace + enum 을 사용하고 TEnumAsByte까지 사용하는 것이 번거롭지만 나아보임

	6. #include <Kismet/GameplayStatics.h>는 Gameplay에 대한 class 내부의 static 함수들의 모임
	- 사실 상 전역 함수
	- 임시로 DelegateTrigger를 찾기 위해 UGameplayStatics::GetActorOfClass(this, ADelegateTrigger::StaticClass())로 찾았음

	7. #include "Particles/ParticleSystemComponent.h"
	- 파티클은 헤더 경로가 이런데 자주 쓸 거 같으니 외우도록

	8. Particle->Activate(true);
	- true의 파라미터 네임은 bReset임 -> true라는 건 활성화 돼 있는 중에 이 코드가 불리면 다시 시작한다는 뜻
	- 기본값은 false임

	9. GetActorLocation은 내부적으로 RootComponent의 Location을 얻어 옴

	10. 스태틱 메쉬의 모빌리티가 스태틱이라면 이동 관련 코드에도 영향을 미침 -> 무버블로 변경
	- SimulatePhysics로 바꾸면 Collision Preset이 PhysicsActor로 바뀌고 조명도 무버블로 자동으로 바뀜

	11. SphereOverlapActors C++ 버전 사용
	
	UKismetSystemLibrary::SphereOverlapActors
	(
		this,
		GetActorLocation(),
		500,
		{ EObjectTypeQuery::ObjectTypeQuery4 } ,
		AActor::StaticClass(),
		{ this },
		OutActors
	);

	- EObjectTypeQuery에 대해 ObjectTypeQuery4를 준 건 ObjectType이 PhysicsBody인 물체와의 충돌 검사임

	- ECollisionChannel, EObjectTypeQuery, ETraceTypeQuery 콜리전 관련하여 이렇게 3가지 열거자를 언리얼에서 제공하는데 각각 쓰임 방법이 다름

	1) ECollisionChannel : 엔진이 제공하는 기본 ObjectType 6개 + Channel 2개 + 엔진이 예약한 채널 6개 + 우리가 프로젝트 세팅에서 직접 정의할 수 있는 커스텀 채널 18개, 
	총 32개의 채널에 대해
	ObjectType에 대해선 각각 이름으로 접근 가능 ECC_WorldStatic, ECC_WorldDynamic, ECC_Visibility 등
	우리가 커스텀 정의한 채널들에 대해선 정의한 순서대로 ECC_GameTraceChannel1, ECC_GameTraceChannel2, ... 로 접근 가능

	이 때 유의할 점은 Object이건 Channel이건 구분 없이 정의한 순서대로 <Config - DefaultEngine.ini>에 적혀 있음

	Object1 - Channel1 - Channel2 - Object2 순으로 새로운 콜리전을 정의하게 되어도 만든 순서대로 ECC_GameTraceChannel로 구분지어 짐

	2) EObjectTypeQuery : 콜리전이 Object와 Channel에 대해 크게 구분지어지기 때문에 EObjectTypeQuery는 ObjectType에 대해서만 접근 가능함
	ObjectTypeQuery1, ObjectTypeQuery2, ObjectTypeQuery3, ObjectTypeQuery4, ... 이렇게 접근되어지는데
	기본적으로 ObjectTypeQuery6까지는 엔진이 기본 제공하는 ObjectType임(ObejctTypeQuery1 : WorldStatic, ObejctTypeQuery2 : WorldDynamic, ObejctTypeQuery3 : Pawn 등)
	순서로 유추가능하고
	ECollisionChannel과 다르게 Custom ObjectType들에 대해선 Channel과 관계없이 ObjectType이 추가된 순서로만 구분한다

	ex) Object1 - Channel1 - Channel2 - Object2 순으로 콜리전에 대해 커스텀 정의가 생기게 되면 
	ObjectTypeQuery7 : Object1 이고
	ObjectTypeQuery8 : Object2 인 것임

	3) ETraceTypeQuery : 2번의 설명에서 Obejct와 Channel의 차이를 이해한다면 같은 방법임

	ex) Object1 - Channel1 - Channel2 - Object2 순으로 콜리전에 대해 커스텀 정의가 생기게 되면
	TraceTypeQuery3 : Channel1
	TraceTypeQuery4 : Channel2

	12. 참고로 엔진에서 사용자 정의 채널에 대해선 #define COLLISION_WEAPON ECC_GameTraceChannel1 과 같은 매크로를 사용할 것을 권고함
	- ex. #define OBJ_COLLISION_OBJECT1 EObjectTypeQuery::ObjectTypeQuery7
	- ex. #define CHN_COLLISION_CHANNEL1 EObjectTypeQuery::TraceTypeQuery3

====
0705
====
	1. impulse는movement 계열 component 혹은 primitive component를 상속받은 컴포넌트에 줄 수 있음
	- Mesh->AddRadialImpulse();
	- 위 함수는 PrimitiveComponent의 함수

	2. 축 매핑 중 LookUD는 Scale -1 줬는데
	- 아마 PlayerController에서 yaw,pitch, roll 중에 pitch 관련 옵션 기본값이 혼자 -2.5 였던 값이 있는데 아마 기본 컨트롤러에 대해 고려해서 이렇게 만든 듯

	3. 키 입력을 함수랑 엮어주기 위해 Character의 SetupPlayerInputComponent()에서
	- PlayerInputComponent->BinxAxis("MoveFB", this, &Acharacter::MoveFB); 로 처리할 수 있음

	- 매크로로 간단히 만들면 #define BindAxisAuto(FunctionName) BindAxis(#FunctionName, this, &ThisClass::FunctionName) ... #undef BinxAxisAuto

	4. FRotator는 FQuat를 래핑한 클래스 이기 때문에 GetForwardVector()가 불가능함
	- FRotator에서 quaternion을 불러서 quaternion에 대해 forwardvector를 얻어야 함

	5. AMyCharacter를 블루프린트 AMyMyCharacter로 만들고 나서 외형 및 위치, 방향 잡아주고 나서 그 캐릭터로 게임을 하려면 GameMode에서 DefaultPawnClass로 잡아줘야 함
	- 기본 제공 되는 GameMode에서 DefaultPawnClass = ?; 를 해줘야 하는데 우리가 지정할 캐릭터가 블루프린트 타입임
	- 생성자에서 처리하기 위해선 ConstructorHelpers::FClassFinder<APawn> MyPawn(TEXT("AMyMyCharacter 블프 경로_C")); 로 얻어온 후
	- if(MyPawn.Succeeded()) { DefaultPawnClass = MyPawn.Class; }

	6. TSubclassOf를 클래스 래퍼런스라고 볼 수 있으나
	- 더 정확히는 UClass가 클래스 래퍼런스임

	- 둘의 차이 : UClass는 딱 그 타입만 / TSubClassOf는 상속받은 애들까지 체크 가능

	7. springarm, camera 헤더 외우기
	- #include <Gameframework/SpringArmComponent.h>
	- #include <Camera/CameraComponent.h>

	8. CreateDefaultSubObjectAuto(SpringArm)->SetupAttachment(GetRootComponent());
	- 생성과 동시에 붙이기

====
0706
====
	1. PrimitiveComponent란?
	- 형태를 가지는 컴포넌트
	- 메쉬 계열 혹은 콜리전 계열

	2. SetupPlayerInputComponent의 주석을 보면 functionality라는 단어가 있는데
	- input시 기능을 묶는다는 의미를 표현하기 위해 기능을 뜻하는 function을 쓸 수도 있었지만 function은 다른 의미로 해석될 수 있으니 이런 단어를 쓴 것으로 보임

	3. 함수에 대해선 정의로 이동(F12) 혹은 호출 계층구조 보기(Ctrl T) 하면 어떤 내용인지를 확인할 수 있고
	- 변수에 대해선 모든 참조 찾기(Shift F12)로 엔진 내부 구현을 살펴볼 수 있음
	- 모든 참조 찾기에 대해선 범위를 지정할 수 있는데(현재 문서 혹은 전체 솔루션 등등)
	- CharacterMovementComponent의 Velocity같은 변수는 굉장히 많이 쓰이고 있으므로 모든 참조 찾기를 눌렀다간 렉 걸려 재부팅할 경우도 생김

	4. 조건을 표현하는데 있어서
	1) if(PendingImpulseToApply.Z != 0.f || PendingForceToApply.Z != 0.f)
	2) if( ! (PendingImpulseToApply.Z == 0.f && PendingForceToApply.Z == 0.f))

	두 구문은 같은 의미를 같지만 강사님은 2번을 선호하신다고 함
	사실 나는 1번이 더 잘 읽힘

	5. Movement 계열의 ApplyRadialImpulse를 좀 더 알아보면
	- Radial에 대해 처리 후 ApplyImpulse로 처리 됨 -> 이런 처리가 일원화이며 이런 구성이 좋은 구성

	- 멤버 변수인 PendingImpulseToApply 변수를 한 프레임동안 팍 올렸다가
	- Velocity에 더해준 후 PendingImpulseToApply는 다시 0값을 가지게 됨
	- Pending이란 뜻이 '보류'라는 뜻을 가짐에서도 유추할 수 있으며 실제 엔진 내부에서도 위 설명과 같이 구현되어 있음

	- 추가로 CharacterMovementComponent의 Velocity는 OldVelocity 혹은 LastUpdateVelocity 등 다른 변수의 값을 정하는 곳에도 쓰이고 있음(Velocity 그 자체로 속도를 정하는 것은 아닌 것 같음)

	6. 헤더를 추가함에 있어 #include "" 혹은 #include <>의 2가지 경우가 있는데
	- "" : 현재 파일 기준으로 먼저 탐색 후 지정 된 경로를 탐색
	- <> : 지정 된 경로를 탐색

	- 지정 된 경로라 함은 VS에서 <속성 페이지 - VC++ 디렉터리 - 포함 디렉터리>와 같은 곳에서 미리 정해둔 경로를 의미

	- 앞으로 언리얼헤더는 <>, 우리 프로젝트 헤더는 ""로 사용하여 구분짓기로 함

	7. 애니메이션을 적용해주기 위해 AnimInstance를 상속하여 MyAnimInstance를 만듬(C++)
	- 이 클래스가 해줄 작업은 블프 이벤트 그래프에서의 로직을 대신 처리하여 변수를 다루기 위함임
	- BlueprintUpdateAnimation을 사용하여 매 프레임 업데이트 하던 내용을 C++로 처리해주어야 함

	- BlueprintNativeEvent로 되어서 C++내용을 블프에서 오버라이드하는 식으로 처리할 줄 알았으나
	
	- C++에서는 NativeUpdateAnimation을 오버라이드하여 우리의 변수를 업데이트 시켜줄 수 있음
	
	- 어떤 함수를 사용할지가 막막할 때 virtual 키워드를 찾는 것이 좋아 보임

	- 위와 같은 함수를 인터페이스처럼 제공했는데 이런 경우 접근 지정자에 대해선 부모의 접근 지정자를 따라가는 것이 좋음

	- 접근 지정자 symbol을 구분지을 때 public은 우하단에 아무것도 안 붙어있었는데 좌하단에 화살표가 붙어있는 것은 다른 파일에 정의가 있다는 뜻임
	(NativeUpdateAnimation은 좌하단엔 화살표, 우하단엔 아무것도 x -> 정의는 다른 파일에 있고 접근 지정자는 public이라는 뜻)

	8. 오버라이드 시 부모가 붙여둔 const는 자식에서 무조건 지켜져야 하지만 부모가 안 붙여둔 const를 자식에서 더 붙인다고 문제가 되진 않음

	9. auto로 변수를 받는 경우는 우측의 값이 명백한 경우
	- 명백하다는 건 함수 이름에서 티가 나는 정도라고 할 수 있을 듯

	10. Actor에서 GetVelocity를 받을 수 있기 때문에
	- GetOwningActor()로 받아서 처리하는 것도 낫배드(TryGetPawnOwner() 대신)
	
	11. C++에 우리가 정의한 AnimInstance를 애님 블프로 만들기 위해선
	- 콘텐츠 브라우저 우클릭 - 애니메이션 - 애니메이션 블루프린트로 만들어주어야 함
	- 다른 C++을 블프로 만드는 방식으로 하면 안됨

	12. 멀티캐스트 델리게이트는 반환값이 void여야만 함
	- 호출 순서가 보장이 안 되기 때문에 반환값을 배열에 담아서 돌려준다던가 하는 방법도 불가능

	13. 싱글캐스트 델리게이트가 반환값을 받기 위한 문법은
	- DECLARE_DELEGATE_RetVal_OneParam(int, FTriggerType1, int) 임
	- 반환값을 return받기 위해선 ExecuteIfBound 대신 IsBound()를 체크 후 Execute()함수를 통해 반환값을 반환 받을 수 있음
	- ExecuteIfBound()는 반환값이 bool 고정

	14. 델리게이트는 NineParams가 최대이며 OneParam 이후 TwoParams 이후 부터는 's' 붙이는 것 유의

	15. 월드 상 큐브 125개에 대해 전체 클릭 후 우클릭 액터 병합 + 폴더에 담아두어 월드 상 액터에 대한 관리도 해두었음

====
0707
====
	1. 멀티캐스트 델리게이트를 만드는 방법
	- TMultiCastDelegate<void(int)> a;
	혹은
	- DECLARE_MULTICAST_DELEGATE_TwoParams(FMultiTriggerType, int32, FLinearColor)

	2. UBT와 UHT는 전처리보다 더 먼저 진행되는 언리얼만의 빌드 방식임
	- UBT : Unreal Build Tool
	- UHT : Unreal Header Tool

	- UHT가 먼저 UCLASS(), UFUNCTION()같은 키워드들을 읽고 먼저 처리를 하기 때문에 ClassName.generated.h가 전처리로 파일에 포함되는 과정에서 문제가 없었던 것임
	- 출력을 확인해보면 위 내용을 확인할 수 있으며 <출력>이 주는 정보가 생각보다 많음

	3. public을 위로 올리는 건 습관화
	- 보기 편하기 위해

	4. 컴포넌트를 일반 배열로 만들고 UPROPERTY()로 리플랙션으로 노출시키려고 하면 첫 번째 인자를 제외하곤 적용받지 못함
	- TArray<> 사용하자
	- 혹은 컴포넌트는 배열로 만들지 말자

	5. 머티리얼을 받는 자료형 중에 UMaterialInterface가 있음
	- 동적 머티리얼은 UMaterialInstanceDynamic임
	- 머티리얼의 변수와 상호작용을 하기 위해선 UMaterialInstanceDynamic 자료형이어야 함(Cast)
	- 머티리얼 변수를 통제할 땐 실제 머티리얼에 있는 변수 이름이여야 하며 문자열로 넘겨주는 것이 단점

	6. FString과 FName이 암시적으로 변환될 수 있는 것 같으나
	- 생성자에선 explicit인지 확인 필요

	7. meshes[i]가 문자열로 그대로 읽히는 현상에 대해 ADDDYNAMIC, BINDDYNAMIC 쪽 참조

====
0710
====
	1. 블프 에디터의 컴포넌트 이름을 변수의 이름으로 띄울지 말지를 정할 수 있음 (사실 TMI)
	- 에디터 개인 설정 -> 일반 -> 외형 -> 네이티브 컴포넌트의 기저 이름 표시

	2. #define TestMacro(...) FString::FromInt(__VA_ARGS__)
	- 가변인자로 아무것도 넣지 않게 될 경우 FSTring::FromInt()가 되기 때문에 에러임
	
	3. 문자열은 ""끼리 붙여서 사용 가능
	- "a"" ""b" = "a b" 임
	혹은
	- "abc""def" = "abcdef" 임

	4. execDynArrayAdd()라는 함수를 과제하다가 보았는데 어떻게 생겼는지 궁금해서 타고 들어가보니 반환형이나 매개변수들을 동일시하고
	함수 이름에만 차별을 두어서 엔진에서 정의해 둔 함수였음

	- 실제 구현부가 어떻게 되었는지 궁금하였지만 UObject 관련 cpp가 굉장히 많기 때문에 그 안에 어딘가에 있는 걸로 마무리 함
	- 저런 매크로가 반복 작업을 줄이는 데에는 좋지만 사용하는 입장에서 F12로 찾아갈 수가 없으니 불편하기 함

	5. 머티리얼의 변수는 문자열로만 통제가 가능함
	- 머티리얼에 있는 변수 '이름들'을 가져올 수는 있으나 '이름들'을 어떻게 활용할 지는 사용자의 몫

	6. TArray를 크기를 먼저 잡고 인덱스로 접근하기 위한 방법은
	- TArray<int> MyArray; 일 때
	- MyArray.AddDefaulted(10);

	- 사실 동일한 동작을 Reset이나 Reserve도 했을 것 같으나 Reserve의 주석에 after allocation 이라는 설명 때문에 아니라는 게 왜인지는 모르겠음

	7. MulticastDelegate가 Broadcast를 함에 있어 바인드 되었던 인스턴스가 삭제되어도 크래쉬가 안 남
	- 하지만 객체가 삭제 되었어도 바인드 자체가 사라지는 것은 아님
	- 객체가 소멸되는 시점에 언바인드를 해주어야 함(소멸자 혹은 OnDestroy)

	- 가비지 컬렉터가 동작하는 것도 확인해 볼 수 있었음
	- 가비지 컬렉터를 강제 동작시키는 명령어도 있었던 걸로 기억하는데 뭐였더라

	8. 공식 문서에서 MulticastDelegate 사용에 있어 매개변수로 래퍼런스를 넘겨 초기화를 하고자 하는 사용법은 bad라고 함

====
0711
====
	1. TArray를 채우는 방법은 여러가지
	- AddDefaulted
	- Init
	- Emplace(생성 즉시 배열에 대입)
	- Add(생성 후 복사로 배열에 대입)

	- 문서 왈 : empalce가 add보다 성능이 떨어질리 없지만 가독성 면에서 add가 나을 것이니 가벼운 건 add, 그 외엔 emplace 사용

	2. 뜬금 질문으로 생성자에 : Super()가 안 붙는 이유는 인자가 없는 생성자는 명시적으로 안 써도 됨
	- 부모의 인자가 있는 생성자를 사용하고 싶은 경우엔 : (이니셜라이저)를 사용하여 초기화
	- 이니셜라이저(:)를 사용하여 TArray같은 멤버변수도 초기화 할 수 있음
	ex. TArray<int> MyInt;가 있다면 MyClass() : MyInt(10, 3) {} 처럼 -> MyInt(10,3)은 TArray의 생성자를 활용한 것 -> 크기는 3만큼 각 원소는 10으로 초기화

	3. 라인 트레이스(Objects, Profile, Channel)
	- #include "Kismet/KismetSystemLibrary.h"
	- UKismetSystemLibrary::LineTraceSingleByObjects();

	- 라인 트레이스 시(함수이름 끝이 Objects인 것) 어떤 Object와 충돌인지 검사하기 위해 ObjectTypeQuery인가 열거형을 넘겼어야 하는데
	ECollisionChannel과 ObjectType 간에 변환을 해주는 Convert 함수가 있음(UEngineTypes의 static 함수)

	- ECC_Pawn의 경우 ObjectTypeQuery3과 매칭됨
	- ECC와 Object, Chanel간의 채널에 대해선 3,4일 전 정리에서 설명한 적 있음(사용자 설정 object, channel 관련해서도 적혀 있음)

	4. Kismet에 있는 라인 트레이스는 사용을 간편화 해주는 래핑 함수
	- 무슨 말이냐 ? : GetWorld()->LineTraceSingleByObjects(); 로도 라인 트레이스를 할 수 있으나 넘겨야 하는 인자가 까다롭기 때문에 이것을 간편화해주는 함수인 것임

	5. LineTrace 시 hit한 actor가 character로 cast가 성공하면 LaunchCharacter를 하게 되는데
	- LaunchCharcter는 Character.h의 함수이고
	- 내부적으론 캐릭터의 MovementComponent를 찾아 MovementComponent::Launch()를 콜해서 동작하는 방식이며
	- BlueprintImplementable 함수인 OnLaunched()를 부르며 마무리 함 -> OnLaunched를 블프에서 오버라이드하면 launch를 call 했을 때 callback되는 일종의 델리게이트같은 작동인 듯

	6. CreateDefaultSubobject를 배열 버전으로 만든 매크로 사용 시 좌측 값으로 배열의 인덱스에 값을 대입하는 방식이기 때문에
	- TArray를 사용함에 있어 배열의 크기를 먼저 잡아놓지 않는 이상 오류가 날 수 있음 -> 매크로라 알아채기도 힘들 수도

	7. 6번이 좌측에 배열의 인덱스를 먼저 잡아놓은 매크로여서 오류가 난건데
	- 좌측을 뗀 버전을 먼저 만들고
	- 좌측 값도 넣은 버전을 만들 땐 좌측을 뗀 버전과 합쳐서 매크로를 만든다면 나름 깔끔한 코딩이라고 할 수 있겠음

====
0712
====
	1. TArray의 생성자 중 복사로 넘어가는 값에는 nullptr을 넘기면 안 됨 -> 다른 생성자 찾아야 함

	2. 오랜만에 나온 초기화 방법 3가지, copy, direct, uniform
	- copy : =
	- direct : ()
	- uniform : {}

	- uniform은 셋 중 제일 엄격하며 엄격하기 때문에 추천하는 초기화 방식
	- double d{3.4f}; 같은 초기화는 경고가 아닌 에러를 냄

	3. 인터페이스 생성은 언리얼 마법사로 가능함
	- <모든 클래스 표시>가 아닌 곳에서
	
	4. C++ 인터페이스는 UInterface를 상속받은 U 접두어가 붙은 클래스와
	아무 상속도 받지 않은 접두어가 I인 클래스 2개를 작성하게 됨
	- UINTERFACE()로 리플랙션에 노출은 U접두어 클래스가 해주고
	- 우리가 작성할 함수들은 I 접두어가 붙은 클래스에 적게 됨

	5. 블프의 인터페이스 = 순수 가상 함수 <-> C++의 인터페이스는 가상 함수도 가능하며 static도 가능

	6. I접두어 인터페이스에서 C++ 키워드인 abstract가 가능한데 그 이유는 리플랙션에 적용받지 않고 엔진에서 인스턴스를 안 만들기 때문에 가능함
	- abstract 사용엔 주의할 점이 있는데 I 인터페이스를 상속한 클래스에서 바로 abstract 키워드가 붙은 함수를 구현해주어야 함(클래스를 하나 건너뛰고 구현하면 에러)
	- 아니라면 상속받은 클래스가 abstract 키워드를 사용하게 되는데 리플랙션에 노출된 클래스라면 엔진이 인스턴스 1개 이상을 강제하기 때문에 이 과정에서 에러가 남

	7. 언리얼의 인터페이스 사용은 다중 상속으로
	- , public IMyInterface

	8. #include의 경우 선언 위치가 파일의 맨 위여야만 하는 것은 아님
	- 헤더가 필요한 곳에서 include해서 쓰는 것이 나은 경우가 있을 수 있음
	- 클래스 사이에 #include 적어서 쓰는 기법도 많은 듯

	9. 인터페이스의 기본 사용은 인터페이스의 헤더를 추가 후 인터페이스로 Cast하여 사용하면 됨
	- Cast의 유효 체크 후 사용하면 안전한 사용이 되겠음

	10. 가벼운 인터페이스 헤더를 추가함으로서 컴파일 타임을 줄이는 것만으로도 장점이라고 볼 수 있겠음
	- 언리얼 헤더들이 워낙에 무겁다 보니

	11. 인터페이스를 원래 인터페이스의 정의에 맞게끔 순수가상으로만 구성하고 싶다면
	- 1) abstract : C++ 문법이며 IInterface가 리플랙션에 노출되지 않아 가능, 하지만 상속받은 클래스들이 한 다리 건너뛰고 구현하면 에러
	- 2) PURE_VIRTUAL(FUNCTION_NAME) : 함수 구현부를 가지는 매크로이며 구현부가 실제 코드상에서 불리게 되면 LowLevelFatalError를 일으켜서 이 함수는 오버라이드가 강제됨
	- 3) unimplemented() : check(assert)를 포장한 매크로, check는 크래쉬를 일으켜 엔진을 중지시키는 언리얼의 assert 구문
	
	- PURE_VIRTUAL을 추천하는 이유는 어떤 함수에서 크래쉬가 난지 알려주는 관점에서 좋을 것 같음

	12. 간단한 복습으로 BlueprintNativeEvent, BlueprintImplementableEvent는 함수 원형을 virtual로 적으면 안 됨
	
	13. 인터페이스의 BlueprintNativeEvent 구현을 알아보면
	- _Implementation이 인터페이스의 기본 구현을 가진다면 기본 구현을 하고 아니라면 (PURE_VIRTUAL) 처리를 하여도 됨
	- 인터페이스를 상속하는 클래스에선 _Implementation을 오버라이드 하면 됨
	
	- 함수의 원형은 인터페이스에만 갖고 있으면 됨

	14. BlueprintNativeEvent, BlueprintImplementableEvent가 붙은 함수는 call을 할 때 일반 함수들과는 불리는 방식이 다름
	- IMyInterface::Execute_MyFunction(UObject* O);
	- 여기서 UObject로 넘겨주어야 하는 객체는 인터페이스를 구현한 클래스여야 함 -> 아닐 경우 check로 걸러 냄
	- 인터페이스를 블프에서 오버라이드 하려고 하는 경우 C++에서 그 함수를 부를 때
	Execute_ 가 붙은 static 함수 사용이 강제되는데 그 이유는
	함수의 원형과 _Implementation이 붙은(BlueprintNativeEvent) 함수는 gen.cpp에서 그 함수를 부를 경우 에러를 내게끔 만들어 놨음

	15. 추가로 라인트레이스시 FHitResult에 담기는 Actor는 약포인터이기 때문에 .Get()을 해야 함
	- 혹은 Actor를 날포인터로 넘겨줄 수 있는 GetActor()를 HitResult로부터 부를 수도 있음

	16. Blueprint에서 쓰게 끔 만들어 놓은 함수의 경우 (Native, Implementable) 함수 이름에 접두어로 K2_가 붙여서 식별하는 경우가 많은 듯(Kismet 2?? 뭐 이런 뜻이라나)
	- 블프에서 K2_ 가 붙게 되면 거슬릴 수 있으니 UFUNCTION()의 메타 지정자 중에 meta = (DisplayName = "NoK2Version") 로 블프에 보여질 이름을 바꿀 수도 있음

	17. 16번을 적다보니 생각난 건데 K2_ 버전이 있다면 인터페이스에 K2접두어가 없는 버전을 만들어 K2_가 붙은 버전을 부르는 함수를 만들면 되겠음

====
0713
====
	1. C++의 MyInterface를 블프의 BP_Explosion에 상속 후 (C++의 인터페이스를 블프에 직접 상속)
	- C++ 코드로 (Execute_) 실행시켜보려 했을 때 블프에서 그 함수를 오버라이드 하지 않았음에도 "블프에 함수 구현이 있는 걸 부르겠다" 라는 흐름으로 빠짐(gen.cpp)
	- 이 테스트 과정에서 UINTERFACE() 였던 것이 0순위로 의심됨(지정자를 채우거나) or native의 동작이 원래 그렇거나

	- C++의 인터페이스를 블프 직접 상속 시 NativeEvent 사용은 고려를 해보자

	2. 솔루션 탐색기의 '검색'창 활용
	- '몽타주 재생' 노드의 정체를 밝히기 위해 '검색'창에 playmontagecallbackproxy 검색

	3. UPlayMontageCallbackProxy를 까보면
	- private으로 감추고 static 으로 선언한 'CreateProxy 어쩌구 저쩌구' 함수가 있음
	- 예를 부르게 되면 private으로 감춰둔 PlayMontage를 부르게 됨
	- 몽타주는 같은 몽타주여도 ID가 다름
	
	4. '몽타주 재생'의 출력 핀이 여러개일 수 있는 원리는 간단하게 말하면 'DynamicMulticastDelegate'임
	- AnimInstance가 갖고 있는 BlendOut, Interrupted, ... 등의 델리게이트에서 Proxy의 델리게이트를 호출하고
	- 우리가 연결해 놓은 핀들은 Proxy의 델리게이트에 바인드를 하게 되는 것

	- 위 과정을 거치면 우리의 애님 인스턴스가 몽타주마다 BlendOut, Interrupted,... 등의 상황에서 타이밍에 맞게(얘네도 델리게이트를 호출하는 것) Proxy의 델리게이트를 호출하는 함수를 호출하는데
	이 때 바인드되어 있는 것이 있다면 불리게 되는 것(Broadcast)

	- '몽타주 재생' 자체가 Proxy임 -> 이 노드가 불리는 만큼 Proxy가 만들어지게 된다고 보면 됨
	- 걸어놨던 내용은 '몽타주 재생' = Proxy 가 Destroy 되는 시점에 모두 Unbind 하게 됨

	5. Proxy : 중개자 정도의 의미로 받아들이면 됨

	6. 각각의 출력 핀(흐름)들은 UPROPERTY(BlueprintAssingable)로 걸려있어 우리가 거는 흐름은 다이내믹 멀티캐스트 델리게이트에 '할당' 하게 되는 것과 마찬가지
	- UPROPERTY(BlueprintAssingable) : dynmulticastdelegate를 블프에서 '할당'할 수 있게 만드는 키워드임
	- 이게 핀으로서 출력될 수 있었던 이유는 UObject - UEdNode - K2Node - ,... - K2Node_PlayMontage 로 상속받은 구조 자체로 엔진에서 처리를 해주는 듯
	- 위에서 설명한 Proxy도 K2Node_PlayMontage가 참조하는 형태로 가지고 있고 실질적으로 K2Node_PlayMontage가 Proxy를 만들어서 처리하는 듯

	7. Proxy를 만들어서 부르는 '몽타주 재생' 이건 Character의 함수인 PlayAnimMontage이건 결국엔
	- AnimInstance의 MontagePlay를 내부에서 부르고 있음
	- 결국 AminInstance의 MontagePlay가 끝판왕임 -> 얘 부르면 됨

	8. uasset의 경우 Content 이후의 경로만 망가뜨리지 않는다면 '이주'가 아닌 폴더에서 복사나 이동으로 넘겨줘도 됨

	9. 에디터 유틸리티 - 에디터 유틸리티 블루프린트가 있음
	- 에디터에 기능을 더 추가해줄 수 있는 듯

	10. 애니메이션을 다룸에 있어 블프가 아쉬운 점은
	- MetaData를 다룰 수 없음

	- 애니메이션 에디터에서 배열로 추가해 줄 수 있고
	- MetaData 클래스를 만들어서 그 클래스를 위 배열에 추가해 줄 수 있음
	- 하지만 CPP에서나 처리해 볼 수 있는 듯

	- 애니메이션의 MetaData를 유용하게 쓸 수 있는 경우는 '공격 애니메이션' 자체가 공격 계수를 가지고 있어 원래 공격력에 배수로 데미지가 들어간다던가
	하는 애니메이션 단위로 처리가 가능함(다른 유용한 활용이 많을 듯)

	- 유틸리티 블루프린트에서는 'GetMetaData'를 가지고 올 수 있긴 함(인 게임내 적용 받을 내용이 아니라 애니메이션의 관리를 위해 여기에만 풀어놓은 것 같기도)

	11. 애니메이션 에디터에서 '커브'를 시간 별로 편집하게 되면
	- 애니메이션 블루프린트에서 'Get Curve Value'로 현재 애니메이션의 시점에서의 커브 값(float)이 얼마인지를 알 수 있음
	
	- 게임에 적용시키기 좋은 예는 공격 타이밍에 따라 데미지가 다르게 들어갈 수 있게끔 처리할 수도 있을 듯

====
0718
====
	1. class UParkourComponent : public UActorComponent {} 생성

	2. enum 복습
	- enum class에 지정자 BlueprintType이 붙게 되면 : uint8 이 강제 됨 -> 저 키워드 없이 UENUM()만 한다면 타입 상관 없음
	- namespace로 감싼 enum이 TEnumAsByte<>로 강제되는 경우가 있는데 그 경우는 Member Variable인 경우

	3. <namespace로 감싼 enum> vs <enum class>
	- 취향 차이 혹은 사용처가 갈린다라고 할 수 있음 -> enum class의 경우 정수형으로 auto cast가 안 되기 때문에 이런 상황
	- enum은 수치를 보기 좋게 포장한 느낌 / enum class는 <고르시오> 같은 느낌

	4. 리플랙션에 노출되지 않은 코드를 리플랙션에 노출된 코드에서 사용할 경우 에러날 수 있음
	
	typedef int MyInt;

	USTRUCT()
	struct MyStruct
	{
		GENERATED_BODY()

		MyInt i;
	}
	
	- 리플랙션 코드에서 typedef이 적히지 않아 MyInt의 타입을 알 수 없게 됨

	5. 구조체를 데이터 테이블로 활용하기 위해선 : public FTableRowBase 를 상속
	- #include "Engine/DataTable.h"
	- 상속이기 때문에 부모의 헤더 필요
	- 실제 데이터 테이블을 물려 주기 위해선 class UDataTable* DataTable; 에 담아줘야 함

	6. 데이터 테이블값 TArray에 얻어오기
	- TArray<FParkourData const*> Rows;
	DataTable->GetAllRows("", Rows)
	- Rows에 데이터 테이블의 값을 인자로 넘겨 받아오는 건데
	 ""를 넘기는 건 모든 rows를 얻어오겠다는 뜻 -> "" 안에 이름에 포함된 문자열이 있다면 그 녀석들만 얻어오게 됨

	 7. static 멤버 변수는 UPROEPRTY 키워드 쓰면 안 됨(static을 타입명으로 읽어서 컴파일 시 오류)
	 - 우회하는 방법은 static 멤버변수를 반환하는 Getter를 블프에 노출해주면 됨

	 8. 마찬가지로 다중 컨테이너(map에서 value로 배열을 가지는 등)가 블프에선 사용이 안되지만
	 - 우회 : 구조체에 배열 멤버를 가지고 그 구조체를 value로 가지는 map 정의 -> 실사용은 하지 말자

====
0719
====
	1. 캐릭터 기준 배꼽, 왼손, 오른손, 발, 머리 쪽에 애로우 컴포넌트 달아줌
	- 장애물에 대한 조사를 위해서 달아준 보조 컴포넌트임(위치와 방향 제공)
	- 모든 애로우에서 라인 트레이스를 해서 장애물을 감지해 볼 수도 있지만 쓸데없는 계산은 줄이기 위해 배꼽 쪽 라인트레이스가 감지되면 추가로 감지되는 방식으로 구성할 예정

	2. SceneComponent::GetForwardVector()로 트랜스폼을 가지는 컴포넌트들은 정면벡터를 얻어올 수 있음
	- 하지만 Rotation에서 정면 벡터를 뽑아오고 싶은 경우 쿼터니언으로 변환 후 정면벡터를 뽑아올 수 있음

	3. TMap<>의 경우 key값이 없는 상태에서 = 연산자로 value값을 넣으려고 한다면 오류남(구현 된 내용이 없는 듯)
	- 헷갈릴 수 있는 부분은 C++ 문법은 위와 같은 내용을 지원함

	ex. std::map<char, int> MyMap;
	MyMap['c'] = 1;

	같은 문법이 원래는 가능하다는 것임 -> TMap<>은 안 됨(엔진 튜닝 ㄱ ?)

	- TMap::Add(AnyType key) 오버로딩 버전 중에 key만 넘겨서 기본 값 잡을 수도 있긴 함, 위 안되는 내용을 보완할려고 만들었나,,
	- = 연산자로 할당하고 싶으면 Add의 key만 받는 버전으로 기본 값 잡아놓고 해주면 됨

	4. 지역 내에서 typedef을 사용하여 그 지역 내에서만 타입에 별명 지어서 사용 가능
	- typedef UStaticMeshComponent MeshType;
	- 어느 경우에 유용하냐면 1) 위처럼 변수 이름이 길다거나 2) int32 -> int64처럼 바뀔 수도 있는 경우나 3) 타입 자체가 별명을 가져 표현하고 싶은 경우

	- 지역을 벗어나면 typedef은 없던 일로 됨(흔히 알고 있던 지역의 개념이 먹힌다고 보면 될 듯)

	- 추가로 using MeshType = UStaticMeshComponent; 처럼 같은 표현을 할 수도 있지만 언리얼은 위 문법이 작동안하는 경우가 있다고 함

	5. TWeakObjectPtr의 -> 는 오버로딩 되어 있음
	- 무슨 말이냐 하면 weak pointer는 Cpp에서 사용하기 전에 .get()을 하여야 사용할 수 있었는데
	- -> 를 오버로딩함으로서 return ~~.Get()을 해주게 되는데
	- ->와 같은 연산자들은 오버로딩 시 원래의 기능을 잃지 않음(구조체나 클래스 포인터의 멤버에 접근하는 기능 자체는 오버로딩을 해도 사라지지 않는다는 뜻)
	- 구조체나 클래스의 멤버에 접근하는 연산자 . 는 오버로딩하면 기능을 잃는 건지 오버로딩이 안 되는 건지 ->랑 다르다고 함

	- 추가로 new 도 오버로딩이 가능한데 new는 메모리 상 공간을 잡아주고 클래스의 생성자를 불러주는 역할까지 여러가지를 하게 되는데
	- 우리가 new를 오버로딩을 하게 되면 원래의 기능 중에 클래스의 생성자를 불러준다거나 하는 기능은 안 잃는다는 관점에서 -> 를 오버로딩하는 것과 비슷하다고 함

	6. UStaticMeshComponent::GetLocalBounds(FVector& Min, FVector& Max);
	- 스태틱 메쉬를 직육면체로 가뒀다고 가정했을 때 모서리 점을 담아올 수 있는 함수 -> 매개변수를 작성 시 const가 붙지 않음으로서 수정 반환 할 것임을 알 수 있었음

	7. AActor::GetActorScale()과 AActor::GetActorScale3D()는 내부 구현이 같음
	- 삼항 연산자 vs if문 으로 내부 구성이 다를 뿐이지 return 값 자체는 같음

	8. UKismetMathLibrary::MakeRotFromX(-Result.Normal).Yaw;
	- 라인 트레이스로 얻은 메쉬 표면에 수직인 (메쉬로 향하는 방향의 수직) 방향을 yaw로서 float값(-180 ~ 180)으로 받게 됨

====
0720
====
	1. float YawToFace;
	- 파쿠르 시 우리가 진행할 방향의 yaw 값

	2. 배꼽에서 나오는 트레이스가 히트에 성공하면 왼손, 오른손, 발, 머리에서도 트레이스를 쏘는데
	파루크를 성공하려면 왼손, 오른손의 트레이스가 성공해야 하고 왼손, 오른손 트레이스 결과의 Normal이 배꼽 트레이스 결과의 Normal과 둘 다 같아야 함
	- 왼손, 오른손도 잡을 공간이 있어야 한다는 뜻

	3. void BeginParkour();
	- EParkourType::None이면 return;
	- 아닐 경우 파쿠르 타입에 맞는 파쿠르 진행할 듯

	4. FVector의 dot과 cross
	- dot : |
	- cross : ^

	- 연산자 오버로딩 되어 있는 내용

	- 가독성이 안 좋으니 FMath::DotProduct(FVector, FVector); 같은 함수로 처리하자

	5. FVector의 ==과 Equal(FVector)의 차이
	- == : 벡터의 성분들이 float임에도 불구하고 x,y,z에 대해 각각 == 비교를 함 -> 0.000001이라도 오차가 날 경우 다른게 됨
	- Equal : 오차 허용 있음 -> KINDA_SMALL_NUMBER인가 암튼 비슷한 이름인데 10e-4인가 그랬음, 0.0001정도

	6. FMath::Cos()은 cosf()을 래핑한 함수
	- 언리얼이 외부 라이브러리에 대해 래핑을 다 해서 '외부 라이브러리 쓰지 말고 우리꺼 써라'라는 협박과 동시에 일관성을 지킨 경우

	7. cos, sin 다룰 땐 degree, radian 항상 생각
	- FMath::DegreesToRadians();

	8. auto는 더 넓은 범위로 잡힘
	- int() + float() 일 경우 float
	- float() + double() 일 경우 double

	9. 후행 반환
	
	template<class T>
	static auto FMath::DegreesToRadians(const T& DegVal) -> decltype((Degval * (PI / 180.0f))
	{
		//...
	}

	- Degval이 int일 경우에도 float이 반환 값이 됨
	- template<class T> static auto 대신 template<class T> static decltype((Degval * PI / 180.0f)) 처럼 쓸 수는 없으니 후행 반환을 사용하는 것

	- 추가로 템플릿은 컴파일 타임에 함수를 만들고 시작하기 때문에 위 auto의 경우 컴파일 타임에 이미 decltype에 대한 type이 이미 추론 됨

	10. 메쉬가 울퉁불퉁해 보이는 경우는 있지만 실제 울퉁불퉁하진 않은 경우가 많음

	11. Vector의 dot은 정규화 된 값을 다루고 있는지 한 번 더 생각

====
0721
====
	1. FMath::IsNearlyEqaul()
	- 오차 허용 범위 지정 가능

	2. 헷갈렸던 for문

	 for(int32 i = 0; i < 5 && Data == nullptr; i++
	 {
		Data = FindData(i);
	 }

	- (i < 5)이고 (Data == nullptr)이 둘 다 true여야 for문이 진행 됨

	3. 파쿠르 순서
	- 장애물 확인 -> 머리 쪽에 장애물 있고 파쿠르 가능하면 climb -> 아니라면 아래 쪽에 장애물 없고 파쿠르 가능하면 slide -> 아니라면 일반 파쿠르

====
0724
====
	1. 함수 타입에 auto가 읽히려면 갖다쓰려는 곳보다 먼저 적혀야 함
	
	2. 지역 변수는 선언과 동시에 초기화해야 오류 안남

	3. if문 안에서 초기화는 =과 ==이 헷갈릴 수 있어서 막아놓은 듯
	- 선언과 동시에 초기화하는 것은 가능하나 선언 후 따로 초기화를 막아놓은 듯

	4. UInputComponent::BinxAction() 사용 중에 EInputEvent::IE_Pressed 같은 인자를 받는 것이 있음
	- 눌렀을 때나 뗐을 떄 등 어떤 키 입력인지를 정하는 열거자

	5. actor는 component들의 중개자
	- 외부에서 어떤 기능에 대해 처리할 때 component들을 직접 가져다가 처리하기 보단 component들을 활용하여 구성된 actor의 함수를 구성하여 처리하는 것이 옳은 방법

	- 우리 Character의 void Parkour() 함수가 ParkourComponent의 void BeginParkour()를 대신 불러주는 것과 같은 설계가 위와 같음

	6. 애니메이션에 root motion이 걸려있을 때 애님 블프에 몽타주에 대한 슬롯 설정이 없었어도 그 애니메이션이 재생된다면 root motion에 대한 움직임은 발생했어야 함

	7. 디버그 시 bool 지역변수가 최적화 변수라서 값 확인이 불가능한 경우가 있었음
	- 우리 VS 빌드 모드가 <development editor>였기 때문일까
	- <debug editor>였다면 bool 지역변수도 값을 찍어줬을 것임

	- development editor가 어느 정도의 최적화와 디버그를 겸한 모드로 알고 있음
	- development vs development editor의 차이는 .exe를 만드느냐와 dll을 만드느냐의 차이

	- .exe를 만들어도 사용할 수 없음 -> 실행에 필요한 다른 파일들이 그 경로에 준비되어 있지 않음

	8. 파쿠르 로직 중 크게 2가지 정도 문제가 있음
	- 1) dot에 대해 모서리의 normal과 처리할 시 문제
	- 2) 물체의 extent.z에 대해서만 처리를 했는데 z가 충족해야 파쿠르를 하는 물체도 있지만 x 혹은 y가 충족해야 하는 물체도 있음

	9. 위 2번에 대한 문제는 우리가 처리할 obastcle의 extent를 float이 아닌 FVector로 받아 0이 아닌 각 요소에 대해서 처리하는 방식으로 로직 구성할 예정

	10. 데이터 테이블 .csv 연동
	- .csv 파일의 경로 설정 후 리임포트

	11. float& FVector::Component(int32 Index)
	- index로 FVector의 x,y,z에 접근할 수 있는 함수
	- return (&X)[Index); 와 같은 로직인데
	- 벡터의 X 주소를 뽑아서 index로 포인터 연산으로 다시 접근하는 것

====
0725
====
	1. 파쿠르를 하기 위해 obstacle의 z가 중요한 경우가 있고 x 혹은 y가 중요한 경우가 있음
	- FVector를 포함한 구조체를 만들어서
	- 그 값이 0이 아닐 경우 obstacle의 성분과 검사를 진행

	2. 파쿠르 진행을 큰 그림으로 보고 가면
	- 1) 키 입력을 통해 Character의 Parkour()를 호출함 -> Parkour()는 ParkourComp의 BeginParkour()를 호출하는 함수
	- 2) BeginParkour()는 파쿠르가 가능한 상황인지를 검사하는데
	- 3) 배꼽, 왼손, 오른손 즈음에서 나오는 LineTrace에 Obstacle이 모두 닿아야 하고
	- 4) 그 모든 LineTrace들이 AcceptableAngle(45도) 보다 작은 각도여야 하고
	- 5) 위 조건을 통과하고 나면 climb을 할지 slide를 할지 일반 높이의 파쿠르를 할지를 정하기 위해 머리, 발 쪽의 LineTrace를 검사하여
	- 6) 머리 쪽 트레이스가 obstacle과 충돌이 있다면 데이터 테이블에서 설정한 파쿠르 모션을 실행하는데
	- 7) 파쿠르 모션이 캐릭터가 Obstacle과 유효한 거리에 있는지 DistMin, DistMax를 검사하고(데이터 테이블의 값과 라인트레이스의 결과를 대조하는 것)
	- 8) 데이터 테이블이 가지고 있는 정보 중 obstacle이 580 +- 10 의 오차 범위 안 쪽에 있어야만 climb하는 파쿠르를 할 수 있음
	- 9) 마찬가지로 slide는 climb은 아니지만 아래 쪽 LineTrace가 충돌이 없고
	- 10) DistMin, DistMax를 충족하며 Obstacle과 바닥과의 거리가 충분한지를 검사하여 slide를 실행함
	- 11) Climb, Slide가 아니면 일반 파쿠르 검사를 진행하고 마찬가지로 DistMin, DistMax, Obstacle의 x,y,z 중 일치하는가를 검사하여 파쿠르 진행

	- 움직임 자체를 만들어진 애니메이션만큼 움직이게 하고자 Root Motion을 사용한 몽타주를 재생하게 되는데

	- Climb의 경우 캐릭터의 z값이 변화하는 것이기 때문에 CharacterMovemonetComponent에서 Mode를 Fly모드로 바꿔주어야 하고(Walk Mode의 경우 Z값이 변하는 RootMotion 애니메이션 사용해봐야 제자리에서 동작함)
	- 일반 파쿠르의 경우 Root 본은 바닥에 붙어 질질 끌려오는 애니메이션이기 때문에 캡슐과 Obstacle간의 충돌이 일어나지 않게끔 하여 진행하게 됨
	- Slide의 경우도 마찬가지로 캐릭터의 Capsule과 장애물의 충돌이 안 일어나는 방식을 사용해야 할 것임

	3. 같은 일반 파쿠르여도 진입 거리에 따라 다른 모션이 나오게끔 만들어놨는데
	- LineTrace 거리가 500이고
	- 진입 거리에 따라 0 - 80 , 80 - 160, 160 - 240, 240 - 320 같은 느낌으로 분할을 하여 파쿠르를 가능하게 끔 해놨음
	- 무슨 뜻이냐면 Obstacle과 캐릭터와의 거리가 500보다 가까우면 파쿠르의 일정 조건을 만족한 것이고
	- 320보다도 가까우면 특정 파쿠르에 몽타주의 조건을 만족하게 된 것

	4. Root Motion이 적용된 애니메이션을 활용하려면 캐릭터의 콜리전을 끄면 안 됨
	- CollisionEnable(false);를 하게 되면 RootMotion이 적용되지 않음
	- 결이 비슷한 예로 위에서도 z 가 있는 RootMotion을 사용하기 위해선 CharacterMovementComponent의 mode를 fly로 바꿨어야 했는데
	- 그렇기 때문에 Root Motion을 적용하려면 캐릭터의 피직스까지 세팅을 잘 해줘야 함

	5. 추가로 처리한 내용은
	- AnimInstance의 MontageEnded 델리게이트에 몽타주 끝났을 때 처리를 위한 함수를 바인드 해줬고
	- 바인드한 이 함수는 콜리전 껐다 켠다거나 MovementMode를 바꾼다거나 ParkourType(BeginParkour()의 진입을 막는, 혹은 지금 진행중인 파쿠르가 뭔지를 알려주는 변수)
	을 비워줌

====
0726
====
	1. AActor::SetActorEnableCollision(bool); 로 collision에 대한 제어가 가능한데
	- Actor가 들고 있는 bool 변수에 대해 값을 바꿔주고
	- 값이 바뀐 것에 대해 Actor가 들고 있는 component들에 대해 요 값이 바꼈다고 알려주는 역할을 하는 함수임

	- 정확히 이 bool 값이 collision 관련해서 어떤 역할을 하는지 파악은 불가능했으나(bActorEnableCollision이라는 bool 변수가 있고 요 변수의 getter 함수를 여기저기 갖다 쓰더라)
	- 적어도 Collision 관련 옵션을 만질 수 있는 Component들의 옵션을 건드리는 것과는 다른 결이라는 것을 파악할 수 있었음

	- 그렇게 판단한 이유는 만약 캐릭터의 capsule이 NoCollision 상태가 되면 바닥과도 Collision이 일어나지 않아 중력의 영향을 받아 바닥으로 떨어지게 되는데
	- 적어도 그런 현상은 일어나지 않았고
	- 코드를 얕게 파봤지만 저 bool 값에 따라 Component의 Collision 관련 옵션을 사용할지 아니면 저 bool 값 그대로를 사용할지에 대한 코드가 있던 것까지는 파악했음

	- UPrimitiveComponent가 들고 있는 BodyIntance라는 멤버 변수(구조체인듯?)가 Collision 관련 옵션을 담당하는 듯 싶음

	- Actor가 충돌 자체에 반응하는 것과 ObjectType간에 hit일지 overlap일지 ignore일지는 또 다른 얘기인 것 같음

	2. 캐릭터의 캡슐 관련해서 NoCollision으로 시작할때랑 시작하고 나서 Capsule을 NoCollision으로 바꿀 때랑 차이가 있는데
	- 이게 버그인지 의도한건지는 모르겠으나
	- 시작 전에 Capsule이 NoCollision으로 시작하면 중력의 영향을 받고 메쉬와는 충돌이 일어나지 않아 무한히 바닥으로 떨어지나
	- 게임 중에 Capsule을 NoCollision으로 바꾸게 되면 그대로 가만히 멈추게 됨

	3. 내 딴에 결론을 내렸는데
	- AActor::SetActorEnableCollision(bool)로 collision을 안 하겠다고 하나 Capsule의 콜리전을 NoCollision으로 돌리나
	외부에서 보기엔 같은 결과가 나와야 하는 것이 맞음 -> Mesh가 기본 세팅을 안 건드렸다는 가정 하에(Query Only 유지)

	- Capsule을 NoCollision으로 시작하면 바닥을 뚫고 추락함
	- AActor::SetActorCollision(false)를 ConstructionScript에서 불러도 무한히 추락함

	- 하지만 BeginPlay에서 Capsule을 NoCollision으로 바꾸면 제자리에 멈춤
	- 마찬가지로 BeginPlay에서 AActor::SetActorCollision(false)를 부르면 제자리에 멈춤

	- 결론 : 캐릭터의 경우 ConstructionScript를 포함한 이전에 Collision을 안 하겠다라고 했을 경우 우리가 의도한 결과를 얻을 수 있으나
	적어도 BeginPlay 이후에서 Collision 관련 옵션을 NoCollision으로 바꾼다고 했을 때 우리가 의도한 결과가 나오지 않을 수 있음

	4. 에셋의 래퍼런스 경로에서
	- Game은 환경변수로 설정 된 프로젝트의 Content 폴더를 의미하고
	- 마지막에 에셋의 이름을 찍기 전에 . 전에는 패키지 이름인데
	- 패키지란 ? -> 에셋이 여러개여도 하나의 파일로 이루어져 있을 수 있음

	- 추가로 '' 랑 앞에 어떤 타입인지를 알려주는 문자를 빼도 되긴하지만 안 되는 경우가 있으니 풀네임으로 적도록 합시다

	5. IK를 하기 위해
	- AnimInstance에 발에서부터 바닥으로 트레이스 하기 위해 FName으로 구성 된 양 발 뼈 이름을 가진 변수 2개를 선언해 둠

====
0727
====
	1. void TraceForIK(FName const& Bone, float& Distance, FRotator& Rotator) const;
	- Bone을 받아서 Distance랑 Rotator를 수정 반환할거라는 것을 함수 원형만 보더라도 알 수 있음

	2. AnimInstance의 GetOwningComponent()는 대체로 SkeletalMesh임
	
	3. USceneComponent::GetSocketLocation(FName);
	- 소켓의 이름(FName)을 받아 그 위치를 돌려주는 함수임
	- 소켓이 넓은 의미를 가지고 있어 소켓 뿐만 아니라 Bone의 이름을 넘겨주게 되면 Bone의 위치도 돌려줄 수 있음
	- USceneComponent::GetBoneLocation(FName) : 함수 이름이 거슬린다면 요런 함수도 있으니 취향껏 사용하면 됨

	- 추가로 GetSocketLocation이 반환값이 FVector인데 (0,0,0)의 값이 나왔을 때 함수가 실패한건지 실제 (0,0,0)의 위치해서 그 결과가 나온건 지는 알 수 없음
	- 에픽 분들이 함수를 간결하게 작성하기 위해 이런 예외처리는 제외하고 만든 듯 싶음

	4. ANSICHAR, WIDECHAR
	- ANSICHAR : char
	- WIDECHAR : wchar_t

	- 각각 char, wchar_t를 typedef으로 한 번 더 감싸놓은 형태라 할 수 있음
	- FName의 경우 char를 인자로 받든 wchar_t를 인자로 받든 생성자를 다 만들어둬서 TEXT("")를 사용하여 캐릭터 자료형의 바이트를 고민하지 않아도 됨

	- TEXT("")에 대응하는 클래스(?)가 맞나,, TCHAR가 있음(아마 클래스 맞을 듯, 템플릿 클래스 ?)

	5. GetOwningComponent()->GetSocketLocation("Root")를 같은 의미로 쓰면
	- GetOwningCompoennt()->GetComponentLocation();
	- 캐릭터의 모델링은 보통 root 본의 위치와 컴포넌트(skeletal)의 위치가 동일함

	6. 발에 대해 IK를 적용한다는 것이 결국 계단 같은 곳에서 다른 층계여도 각각 발이 딛고 있게끔 만들수 있기 위함인데
	- 기본적으로 CharacterMovementComponent에 계단의 높이가 얼마나 높아야 올라갈 수 있는지를 정할 수 있는 변수가 있음 - 기본값은 45

	7. 캐릭터의 MovementComp에서 다루는 내용 중 Braking Sub Step Time 이라는 옵션이 있는데
	- Sub Step : 컴퓨팅 환경 상 움직임이 있어도 Analog한 것이 아니라 매 frame마다 텔레포트하는 방식으로 동작하게 되는데
	이 때 속도가 너무 빨라서 벽을 뚫고 가버릴수도 있는데 이런 상황을 방지하고자 일정 시간마다 보정을 해주는 개념이라고 생각하면 됨
	(다른 스레드라고 볼 수도 있겠으나 그걸 알기엔 Too Much)

	8. 벽을 탄다 -> 다 같은 구현이 아님
	- 덩굴을 자유롭게 타면서 이동하는 구현과
	- 일정 간격마다 짚을 수 있는 포인트가 있다거나 하는 구현

	은 다름

	9. Possess가 컨트롤러가 없게 되면 캐릭터는 공중에 있어도 멈추게 되는데
	- CharterMovementComp에 <컨트롤러가 없어도 피직스 실행>이라는 옵션이 있음

	10. 경사각에 따라 가속도를 다르게 줄 수 있는 옵션도 있으나 잘 작동하는지는 모르겠다고 하심

	11. 앉기(Crouch)를 제공하는 의의는
	- Capsule의 HalfHeight를 줄여준다거나 캠 위치를 바꿔준다거나 하는 동작을 제공한다는 것에 의의가 있음

	12. 1번에서 언급한 함수를 마저 얘기하면
	- 우리는 결국 Distance랑 Rotator를 값을 채워서 반환해주어야 하는데

	Distance = Result.Location.Z - Root.Z;
	
	float const Roll = +UKismetMathLibrary::DegAtan2(Result.Normal.Y, Result.Normal.Z);
	float const Pitch = -UKismetMathLibrary::DegAtan2(Result.Normal.X, Result.Normal.Z);

	Rotator = {Pitch, 0, Roll};

	- Distance는 차렷한 자세를 기준으로 그 발의 위치에서부터 땅이 어딨는지를 나타냄 -> Distance가 (-)라면 땅이 발보다 밑에 있고 (+)라면 땅이 발보다 위에 있음
	
	- DegAtan2 : Degree, Tangent 역함수, 인자는 2개의 의미

	- Rotator를 만드는 의의를 먼저 생각하면 땅이 경사진 땅이라면 발바닥과 땅이 닿으려면 발바닥이 그만큼 돌아있어야 함
	- 결국 발이 땅과 일치하게 만드려면 땅의 Rotator만큼 돌려야 함
	- 결국 위의 Rotator는 땅이 얼만큼 경사져 있나를 알려주는 건데

	Roll은 Y/Z에 대해 Tanget 역함수를 취한거고
	Pitch는 X/Z에 대해 Tanget 역함수를 취한라 할 수 있는데

	일단 왼손을 들고 언리얼의 축을 만들게 되면 검지가 z축, 중지가 x축, 엄지가 y축이라 할 때
	검지의 끝에서 중지, 엄지의 끝으로 가상의 선을 긋게 됐을 때 각각 그 선과 Z축이 이루는 각(위에서 구한 Roll, Pitch)이라 할 수 있겠음

	13. 언리얼의 축은 왼손을 사용하여 표현할 수 있는데 일반적인 좌표계와 비교했을 때 어떻게 돌리고 돌려도 일치시킬 수 없음
	- 어떻게 돌리고 돌려서 X축과 Z축을 일치시키게 됐을 떄 Y축을 반전시켜야만 언리얼의 축과 일치하게 되는데 이것이 Pitch가 Minus여야 하는 이유임
	- 이 개념이 Controller에서 Pitch Scale이 기본 값이 -2.5 였던 것과도 연결되는 개념임

	14. Actor를 월드에 배치하고 E를 눌러 Rotator를 바꾸는 모드로 전환하고
	- 각 축을 오른쪽으로 돌려봤을 때 X, Z축은 +로 변하는 것을 볼 수 있으나 Y축은 -로 변하는 것을 볼 수 있음

====
0728
====
	1. 그동안 당연하게 Cross를 하고 나면 왼손을 들고 검지가 첫 번째 벡터, 중지가 두 번재 벡터, 엄지가 Cross의 결과로 생각했었으나
	- 이것이 UE가 왼손 좌표계여서 가능했던 것이고
	- 이것은 수학적으로 벡터의 Cross를 하고 나온 결과와는 정반대의 결과인 것
	
	- 오른쪽에 있다라는 판별이 수학적으론 그 결과의 벡터가 z가 마이너스가 나오는데에 비해
	- 오른쪽에 있다라는 판별이 UE에선 벡터의 z가 플러스가 나옴

	2. 추가로 왼손좌표계는 D3D, 언리얼, 유니티에서 쓰고 있으며
	- 오른손 좌표계는 다른 그래픽 라이브러리, OpenGL, 수학의 좌표계 등에서 쓰임

	3. 결론적으로 수학 좌표계와 언리얼 좌표계는 x,y,z축 중 하나가 축이 반전되어 있는 것이고
	이런 점을 고려하여 수식에 적용해주어야 함(예를 들면 DegAtan2로 Rotator를 구하게 된다면 pitch가 마이너스)

	4. 땅의 법선벡터에 대해 DegAtan을 하게 되는 것이고 땅의 법선벡터를 기준으로 땅을 상상하게 됐을 때 
	- Roll은 회전과 DegAtan의 결과 각이 같으나
	- Pitch는 부호가 바꼈다는 것을 결과론적으로는 계산해 볼 수 있음

	5. FInterpTo, RInterpTo의 cpp를 까봤을 때
	- DeltaSeconds, InterpSpeed의 값이 Start -> Target을 갈 때 몇 퍼센트를 향할지를 0 ~ 1 사이 만큼으로 Clamp하고 있었음
	- DeltaSeconds * InterpSpeed 만큼을 0 ~ 1로 Clamp하던데 
	- Deltaseconds를 60hz기준으로 생각하고 interpspeed를 대략적으로 정하게 되면 원하는 움직임을 만들 수 있을 것,, 걍 여러번 테스트하자

	- 이것만 알면 됨 -> interp는 tick 단위로 계산할 경우 부드러운 움직임을 만들기 위해 사용하고
	그 부드러운 움직임은 start -> target 의 차이에서 몇%에 해당하는 비율만큼 계산 한 번 당 줄어드는 거임(처음 빠른 움직임 -> 점점 느려지는 이유)
	start == target이 거의 차이나지 않을 만큼 가까워졌을 경우엔 interp 내부적으로도 return 시키는 로직이 있음

====
0731
====
	1. 애님 인스턴스는 프리뷰에 적용된 인스턴스가 있기 때문에 2개처럼 보일 수가 있음
	- Try Get Pawn Owner가 유효한지 체크하면 우리꺼만 체크 가능

	2. 본 트랜스폼(변경), 2 본 IK 는 컴포넌트 공간에서 변환해야 함
	- 기본 로컬 공간에서 애니메이션을 만들게 되는데 위 2노드를 사용하려면 로컬 <-> 컴포넌트, 컴포넌트 <-> 로컬 변환이 필요함

	- 로컬은 스켈레톤 에디터에서 볼 수 있는 공간(각 뼈마다 부모에 상대적인)이고 컴포넌트는 스켈레탈 메쉬 컴포넌트를 의미함(스켈레탈 메쉬의 트랜스폼이 반영된)

	3. 가상 본을 본 트랜스폼으로 옮겨놓고 옮겨진 가상본을 2본IK에 적용해 줄 것임

	4. 본 트랜스폼(변경)의 속성
	- Translation Mode : Ignore, Replace Existing, Add to Existing
	- Translation Space : World Space, Component Space, Parent Bone Space, Bone Space

	- Add to Existing, World Space를 골랐는데 각각 이유는 기존 값에서 더해진 값을 쓰는 것이고 Bone Space로 처리할 수도 있었으나 뼈가 만들어지길 축이 통일되지 않게 만들어져서
	어쩔수 없이 World Space를 사용