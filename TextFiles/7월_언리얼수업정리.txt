====
0703
====
	1. AddDynamic을 통한 델리게이트 바인드는 "::"이 필수임
	- 누구의 함수인지를 명확히 해야 함

	2. C에서 안되는 문법 한 번 보고 가자

	int const i = 5;
	int arr[i] = {0,1,2,3,4};

	- C++은 허용하는 문법이나 C는 안됨
	- 이유는 C++에선 const가 conextpr로 읽혀 컴파일 타임 이전에 i에 대해 상수로 인식시켜 줄 수 있으나
	C는 컴파일 타임이 되어서야 i가 const로서 값이 변하지 않는 불변변수가 되기 때문에 컴파일 타임 이전의 오류를 막을 수 없음

	3. 바인딩이 되어있다는 가정하에 델리게이트를 동작시키는 코드 2가지를 보면
	- 1) if(Trigger.IsBound()) Trigger.Execute();
	- 2) Trigger.ExecuteIfBound();

	4. NamedBox를 상속한 DelegateTrigger가 본인의 이름을 띄우지 못하는 문제가 있는데
	- NamedBox에서 Text->SetText(StaticClass()->GetDisplayNameText()); 이 코드가 문제임
	- 해결 : Text->SetText(GetClass()->GetDisplayNameText());

	- 다른 해결 버전들 : 
		Text->SetText(UKismetSystemLibrary::GetDisplayName(this)));
		Text->SetText(GetName());

	5. 4번의 내용을 사용함에 있어 알아야 하는 내용이 있음
	- 생성자의 this는 본인을 호출하는 것임 -> 자식에서 생성자를 부름에 있어 A -> B -> C 로 상속을 시켰다 했을 때 생성자가 불리는 순서는 A -> B -> C 임
	A의 생성자가 사용됨에 있어 C는 아직 초기화가 안 되어 있기 때문에 접근이 불가능함

	- 그렇다면 4번에서 GetClass()를 했을 떄 자식의 클래스를 얻어 올 수 있었던 이유는
	UObjectBase에서 멤버변수로 최종 상속받은 클래스를 UClass* 타입으로 들고 있는 엔진의 설계방식 덕분임 -> GetClass()는 UClass* 타입의 멤버변수를 return하는 함수

	- 추가로 UObjectBase가 Actor보다 상위 클래스이고 GetClass()가 오버라이드 되지 않은 함수였기 때문에 UObjectBase가 정의한 내용이 그대로 불려질 수 있었음

	- 생성자에서 어떤 함수를 불렀을 때 자식에서 오버라이드 된 함수라면 오버라이드 된 내용이 아니라 생성자를 만들고 있는 그 클래스의 버전 함수가 불릴 것임

	6. TEnumAsByte를 사용함에 있어 전방선언이 가능함(TEnumAsByte는 언리얼의 템플릿 버전 Enum임)
	- TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType; 멤버변수에 대해
	namespace EDrawDebugTrace { enum Type; }

	7. float 자료형에 대해 10의 몇승 이런 표현
	- float MyFloat = 1e5f;
	-> 10의 5승이라는 뜻 ->100000

	- float MyFloat2 = 3e5f;
	-> 3 * 10의 5승이라는 뜻 -> 300000

====
0704
====
	1. TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType;
	
	UENUM(BlueprintType)
	namespace EDrawDebugTrace
	{
		enum Type
		{
			None,
			ForOneFrame,
			ForDuration,
			Persistent
		};
	}

	- UENUM에 BlueprintType을 해야 블프에서 사용 가능
	- C의 문법 enum을 네임스페이스로 구분지어 enum class와 비슷하게 사용

	2. enum이나 enum class나 따로 타입을 정하지 않으면 int 형인데(4byte)
	- enum class TestType : uint8 같은 문법으로 타입의 크기를 정해줄 수 있음
	- 추가로 enum에 정의한 열거자들이 순서대로 0,1,2,... 이런 literal 값들을 가지게 되는데
	이 literal조차 명시한 타입의 크기만큼 잡히게 됨

	3. 접미어 u는 unsigned int, ul은 unsigned long, ull은 unsigned long long

	4. unsigned long operator ""_deg(int i)
	{
		return i;
	}

	- 접미어의 오버라이딩을 하여 1_deg;는 int형이 아닌 unsigned long임
	- _(언더바)는 표준과 겹치는 이름이 될 수도 있으니 권고사항 -> 언리얼 프로젝트는 빌드 오류를 냄

	5. UENUM(BlueprintType)은 : uint8이 강제 됨
	- enum은 BlueprintType이 붙게 되면 enum의 선언에서 : uint8이 강제되는 것은 아니지만 사용함에 있어 TEnumAsByte<>를 거쳐 사용하고
	- enum class는 BlueprintType이 붙게 되면 선언에 : uint8이 강제됨 -> 빌드 오류가 나버림

	- UENUM(BlueprintType)을 사용하게 되면 namespace + enum 을 사용하고 TEnumAsByte까지 사용하는 것이 번거롭지만 나아보임

	6. #include <Kismet/GameplayStatics.h>는 Gameplay에 대한 class 내부의 static 함수들의 모임
	- 사실 상 전역 함수
	- 임시로 DelegateTrigger를 찾기 위해 UGameplayStatics::GetActorOfClass(this, ADelegateTrigger::StaticClass())로 찾았음

	7. #include "Particles/ParticleSystemComponent.h"
	- 파티클은 헤더 경로가 이런데 자주 쓸 거 같으니 외우도록

	8. Particle->Activate(true);
	- true의 파라미터 네임은 bReset임 -> true라는 건 활성화 돼 있는 중에 이 코드가 불리면 다시 시작한다는 뜻
	- 기본값은 false임

	9. GetActorLocation은 내부적으로 RootComponent의 Location을 얻어 옴

	10. 스태틱 메쉬의 모빌리티가 스태틱이라면 이동 관련 코드에도 영향을 미침 -> 무버블로 변경
	- SimulatePhysics로 바꾸면 Collision Preset이 PhysicsActor로 바뀌고 조명도 무버블로 자동으로 바뀜

	11. SphereOverlapActors C++ 버전 사용
	
	UKismetSystemLibrary::SphereOverlapActors
	(
		this,
		GetActorLocation(),
		500,
		{ EObjectTypeQuery::ObjectTypeQuery4 } ,
		AActor::StaticClass(),
		{ this },
		OutActors
	);

	- EObjectTypeQuery에 대해 ObjectTypeQuery4를 준 건 ObjectType이 PhysicsBody인 물체와의 충돌 검사임

	- ECollisionChannel, EObjectTypeQuery, ETraceTypeQuery 콜리전 관련하여 이렇게 3가지 열거자를 언리얼에서 제공하는데 각각 쓰임 방법이 다름

	1) ECollisionChannel : 엔진이 제공하는 기본 ObjectType 6개 + Channel 2개 + 엔진이 예약한 채널 6개 + 우리가 프로젝트 세팅에서 직접 정의할 수 있는 커스텀 채널 18개, 
	총 32개의 채널에 대해
	ObjectType에 대해선 각각 이름으로 접근 가능 ECC_WorldStatic, ECC_WorldDynamic, ECC_Visibility 등
	우리가 커스텀 정의한 채널들에 대해선 정의한 순서대로 ECC_GameTraceChannel1, ECC_GameTraceChannel2, ... 로 접근 가능

	이 때 유의할 점은 Object이건 Channel이건 구분 없이 정의한 순서대로 <Config - DefaultEngine.ini>에 적혀 있음

	Object1 - Channel1 - Channel2 - Object2 순으로 새로운 콜리전을 정의하게 되어도 만든 순서대로 ECC_GameTraceChannel로 구분지어 짐

	2) EObjectTypeQuery : 콜리전이 Object와 Channel에 대해 크게 구분지어지기 때문에 EObjectTypeQuery는 ObjectType에 대해서만 접근 가능함
	ObjectTypeQuery1, ObjectTypeQuery2, ObjectTypeQuery3, ObjectTypeQuery4, ... 이렇게 접근되어지는데
	기본적으로 ObjectTypeQuery6까지는 엔진이 기본 제공하는 ObjectType임(ObejctTypeQuery1 : WorldStatic, ObejctTypeQuery2 : WorldDynamic, ObejctTypeQuery3 : Pawn 등)
	순서로 유추가능하고
	ECollisionChannel과 다르게 Custom ObjectType들에 대해선 Channel과 관계없이 ObjectType이 추가된 순서로만 구분한다

	ex) Object1 - Channel1 - Channel2 - Object2 순으로 콜리전에 대해 커스텀 정의가 생기게 되면 
	ObjectTypeQuery7 : Object1 이고
	ObjectTypeQuery8 : Object2 인 것임

	3) ETraceTypeQuery : 2번의 설명에서 Obejct와 Channel의 차이를 이해한다면 같은 방법임

	ex) Object1 - Channel1 - Channel2 - Object2 순으로 콜리전에 대해 커스텀 정의가 생기게 되면
	TraceTypeQuery3 : Channel1
	TraceTypeQuery4 : Channel2

	12. 참고로 엔진에서 사용자 정의 채널에 대해선 #define COLLISION_WEAPON ECC_GameTraceChannel1 과 같은 매크로를 사용할 것을 권고함
	- ex. #define OBJ_COLLISION_OBJECT1 EObjectTypeQuery::ObjectTypeQuery7
	- ex. #define CHN_COLLISION_CHANNEL1 EObjectTypeQuery::TraceTypeQuery3

====
0705
====
	1. impulse는movement 계열 component 혹은 primitive component를 상속받은 컴포넌트에 줄 수 있음
	- Mesh->AddRadialImpulse();
	- 위 함수는 PrimitiveComponent의 함수

	2. 축 매핑 중 LookUD는 Scale -1 줬는데
	- 아마 PlayerController에서 yaw,pitch, roll 중에 pitch 관련 옵션 기본값이 혼자 -2.5 였던 값이 있는데 아마 기본 컨트롤러에 대해 고려해서 이렇게 만든 듯

	3. 키 입력을 함수랑 엮어주기 위해 Character의 SetupPlayerInputComponent()에서
	- PlayerInputComponent->BinxAxis("MoveFB", this, &Acharacter::MoveFB); 로 처리할 수 있음

	- 매크로로 간단히 만들면 #define BindAxisAuto(FunctionName) BindAxis(#FunctionName, this, &ThisClass::FunctionName) ... #undef BinxAxisAuto

	4. FRotator는 FQuat를 래핑한 클래스 이기 때문에 GetForwardVector()가 불가능함
	- FRotator에서 quaternion을 불러서 quaternion에 대해 forwardvector를 얻어야 함

	5. AMyCharacter를 블루프린트 AMyMyCharacter로 만들고 나서 외형 및 위치, 방향 잡아주고 나서 그 캐릭터로 게임을 하려면 GameMode에서 DefaultPawnClass로 잡아줘야 함
	- 기본 제공 되는 GameMode에서 DefaultPawnClass = ?; 를 해줘야 하는데 우리가 지정할 캐릭터가 블루프린트 타입임
	- 생성자에서 처리하기 위해선 ConstructorHelpers::FClassFinder<APawn> MyPawn(TEXT("AMyMyCharacter 블프 경로_C")); 로 얻어온 후
	- if(MyPawn.Succeeded()) { DefaultPawnClass = MyPawn.Class; }

	6. TSubclassOf를 클래스 래퍼런스라고 볼 수 있으나
	- 더 정확히는 UClass가 클래스 래퍼런스임

	- 둘의 차이 : UClass는 딱 그 타입만 / TSubClassOf는 상속받은 애들까지 체크 가능

	7. springarm, camera 헤더 외우기
	- #include <Gameframework/SpringArmComponent.h>
	- #include <Camera/CameraComponent.h>

	8. CreateDefaultSubObjectAuto(SpringArm)->SetupAttachment(GetRootComponent());
	- 생성과 동시에 붙이기

====
0706
====
	1. PrimitiveComponent란?
	- 형태를 가지는 컴포넌트
	- 메쉬 계열 혹은 콜리전 계열

	2. SetupPlayerInputComponent의 주석을 보면 functionality라는 단어가 있는데
	- input시 기능을 묶는다는 의미를 표현하기 위해 기능을 뜻하는 function을 쓸 수도 있었지만 function은 다른 의미로 해석될 수 있으니 이런 단어를 쓴 것으로 보임

	3. 함수에 대해선 정의로 이동(F12) 혹은 호출 계층구조 보기(Ctrl T) 하면 어떤 내용인지를 확인할 수 있고
	- 변수에 대해선 모든 참조 찾기(Shift F12)로 엔진 내부 구현을 살펴볼 수 있음
	- 모든 참조 찾기에 대해선 범위를 지정할 수 있는데(현재 문서 혹은 전체 솔루션 등등)
	- CharacterMovementComponent의 Velocity같은 변수는 굉장히 많이 쓰이고 있으므로 모든 참조 찾기를 눌렀다간 렉 걸려 재부팅할 경우도 생김

	4. 조건을 표현하는데 있어서
	1) if(PendingImpulseToApply.Z != 0.f || PendingForceToApply.Z != 0.f)
	2) if( ! (PendingImpulseToApply.Z == 0.f && PendingForceToApply.Z == 0.f))

	두 구문은 같은 의미를 같지만 강사님은 2번을 선호하신다고 함
	사실 나는 1번이 더 잘 읽힘

	5. Movement 계열의 ApplyRadialImpulse를 좀 더 알아보면
	- Radial에 대해 처리 후 ApplyImpulse로 처리 됨 -> 이런 처리가 일원화이며 이런 구성이 좋은 구성

	- 멤버 변수인 PendingImpulseToApply 변수를 한 프레임동안 팍 올렸다가
	- Velocity에 더해준 후 PendingImpulseToApply는 다시 0값을 가지게 됨
	- Pending이란 뜻이 '보류'라는 뜻을 가짐에서도 유추할 수 있으며 실제 엔진 내부에서도 위 설명과 같이 구현되어 있음

	- 추가로 CharacterMovementComponent의 Velocity는 OldVelocity 혹은 LastUpdateVelocity 등 다른 변수의 값을 정하는 곳에도 쓰이고 있음(Velocity 그 자체로 속도를 정하는 것은 아닌 것 같음)

	6. 헤더를 추가함에 있어 #include "" 혹은 #include <>의 2가지 경우가 있는데
	- "" : 현재 파일 기준으로 먼저 탐색 후 지정 된 경로를 탐색
	- <> : 지정 된 경로를 탐색

	- 지정 된 경로라 함은 VS에서 <속성 페이지 - VC++ 디렉터리 - 포함 디렉터리>와 같은 곳에서 미리 정해둔 경로를 의미

	- 앞으로 언리얼헤더는 <>, 우리 프로젝트 헤더는 ""로 사용하여 구분짓기로 함

	7. 애니메이션을 적용해주기 위해 AnimInstance를 상속하여 MyAnimInstance를 만듬(C++)
	- 이 클래스가 해줄 작업은 블프 이벤트 그래프에서의 로직을 대신 처리하여 변수를 다루기 위함임
	- BlueprintUpdateAnimation을 사용하여 매 프레임 업데이트 하던 내용을 C++로 처리해주어야 함

	- BlueprintNativeEvent로 되어서 C++내용을 블프에서 오버라이드하는 식으로 처리할 줄 알았으나
	
	- C++에서는 NativeUpdateAnimation을 오버라이드하여 우리의 변수를 업데이트 시켜줄 수 있음
	
	- 어떤 함수를 사용할지가 막막할 때 virtual 키워드를 찾는 것이 좋아 보임

	- 위와 같은 함수를 인터페이스처럼 제공했는데 이런 경우 접근 지정자에 대해선 부모의 접근 지정자를 따라가는 것이 좋음

	- 접근 지정자 symbol을 구분지을 때 public은 우하단에 아무것도 안 붙어있었는데 좌하단에 화살표가 붙어있는 것은 다른 파일에 정의가 있다는 뜻임
	(NativeUpdateAnimation은 좌하단엔 화살표, 우하단엔 아무것도 x -> 정의는 다른 파일에 있고 접근 지정자는 public이라는 뜻)

	8. 오버라이드 시 부모가 붙여둔 const는 자식에서 무조건 지켜져야 하지만 부모가 안 붙여둔 const를 자식에서 더 붙인다고 문제가 되진 않음

	9. auto로 변수를 받는 경우는 우측의 값이 명백한 경우
	- 명백하다는 건 함수 이름에서 티가 나는 정도라고 할 수 있을 듯

	10. Actor에서 GetVelocity를 받을 수 있기 때문에
	- GetOwningActor()로 받아서 처리하는 것도 낫배드(TryGetPawnOwner() 대신)
	
	11. C++에 우리가 정의한 AnimInstance를 애님 블프로 만들기 위해선
	- 콘텐츠 브라우저 우클릭 - 애니메이션 - 애니메이션 블루프린트로 만들어주어야 함
	- 다른 C++을 블프로 만드는 방식으로 하면 안됨

	12. 멀티캐스트 델리게이트는 반환값이 void여야만 함
	- 호출 순서가 보장이 안 되기 때문에 반환값을 배열에 담아서 돌려준다던가 하는 방법도 불가능

	13. 싱글캐스트 델리게이트가 반환값을 받기 위한 문법은
	- DECLARE_DELEGATE_RetVal_OneParam(int, FTriggerType1, int) 임
	- 반환값을 return받기 위해선 ExecuteIfBound 대신 IsBound()를 체크 후 Execute()함수를 통해 반환값을 반환 받을 수 있음
	- ExecuteIfBound()는 반환값이 bool 고정

	14. 델리게이트는 NineParams가 최대이며 OneParam 이후 TwoParams 이후 부터는 's' 붙이는 것 유의

	15. 월드 상 큐브 125개에 대해 전체 클릭 후 우클릭 액터 병합 + 폴더에 담아두어 월드 상 액터에 대한 관리도 해두었음

====
0707
====
	1. 멀티캐스트 델리게이트를 만드는 방법
	- TMultiCastDelegate<void(int)> a;
	혹은
	- DECLARE_MULTICAST_DELEGATE_TwoParams(FMultiTriggerType, int32, FLinearColor)

	2. UBT와 UHT는 전처리보다 더 먼저 진행되는 언리얼만의 빌드 방식임
	- UBT : Unreal Build Tool
	- UHT : Unreal Header Tool

	- UHT가 먼저 UCLASS(), UFUNCTION()같은 키워드들을 읽고 먼저 처리를 하기 때문에 ClassName.generated.h가 전처리로 파일에 포함되는 과정에서 문제가 없었던 것임
	- 출력을 확인해보면 위 내용을 확인할 수 있으며 <출력>이 주는 정보가 생각보다 많음

	3. public을 위로 올리는 건 습관화
	- 보기 편하기 위해

	4. 컴포넌트를 일반 배열로 만들고 UPROPERTY()로 리플랙션으로 노출시키려고 하면 첫 번째 인자를 제외하곤 적용받지 못함
	- TArray<> 사용하자
	- 혹은 컴포넌트는 배열로 만들지 말자

	5. 머티리얼을 받는 자료형 중에 UMaterialInterface가 있음
	- 동적 머티리얼은 UMaterialInstanceDynamic임
	- 머티리얼의 변수와 상호작용을 하기 위해선 UMaterialInstanceDynamic 자료형이어야 함(Cast)
	- 머티리얼 변수를 통제할 땐 실제 머티리얼에 있는 변수 이름이여야 하며 문자열로 넘겨주는 것이 단점

	6. FString과 FName이 암시적으로 변환될 수 있는 것 같으나
	- 생성자에선 explicit인지 확인 필요

	7. meshes[i]가 문자열로 그대로 읽히는 현상에 대해 ADDDYNAMIC, BINDDYNAMIC 쪽 참조

====
0710
====
	1. 블프 에디터의 컴포넌트 이름을 변수의 이름으로 띄울지 말지를 정할 수 있음 (사실 TMI)
	- 에디터 개인 설정 -> 일반 -> 외형 -> 네이티브 컴포넌트의 기저 이름 표시

	2. #define TestMacro(...) FString::FromInt(__VA_ARGS__)
	- 가변인자로 아무것도 넣지 않게 될 경우 FSTring::FromInt()가 되기 때문에 에러임
	
	3. 문자열은 ""끼리 붙여서 사용 가능
	- "a"" ""b" = "a b" 임
	혹은
	- "abc""def" = "abcdef" 임

	4. execDynArrayAdd()라는 함수를 과제하다가 보았는데 어떻게 생겼는지 궁금해서 타고 들어가보니 반환형이나 매개변수들을 동일시하고
	함수 이름에만 차별을 두어서 엔진에서 정의해 둔 함수였음

	- 실제 구현부가 어떻게 되었는지 궁금하였지만 UObject 관련 cpp가 굉장히 많기 때문에 그 안에 어딘가에 있는 걸로 마무리 함
	- 저런 매크로가 반복 작업을 줄이는 데에는 좋지만 사용하는 입장에서 F12로 찾아갈 수가 없으니 불편하기 함

	5. 머티리얼의 변수는 문자열로만 통제가 가능함
	- 머티리얼에 있는 변수 '이름들'을 가져올 수는 있으나 '이름들'을 어떻게 활용할 지는 사용자의 몫

	6. TArray를 크기를 먼저 잡고 인덱스로 접근하기 위한 방법은
	- TArray<int> MyArray; 일 때
	- MyArray.AddDefaulted(10);

	- 사실 동일한 동작을 Reset이나 Reserve도 했을 것 같으나 Reserve의 주석에 after allocation 이라는 설명 때문에 아니라는 게 왜인지는 모르겠음

	7. MulticastDelegate가 Broadcast를 함에 있어 바인드 되었던 인스턴스가 삭제되어도 크래쉬가 안 남
	- 하지만 객체가 삭제 되었어도 바인드 자체가 사라지는 것은 아님
	- 객체가 소멸되는 시점에 언바인드를 해주어야 함(소멸자 혹은 OnDestroy)

	- 가비지 컬렉터가 동작하는 것도 확인해 볼 수 있었음
	- 가비지 컬렉터를 강제 동작시키는 명령어도 있었던 걸로 기억하는데 뭐였더라

	8. 공식 문서에서 MulticastDelegate 사용에 있어 매개변수로 래퍼런스를 넘겨 초기화를 하고자 하는 사용법은 bad라고 함